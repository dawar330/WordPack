{"version":3,"sources":["../node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js","../node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js","../node_modules/webpack/buildin/harmony-module.js"],"names":["heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","isLikeNone","x","cachegetInt32Memory0","getInt32Memory0","Int32Array","debugString","val","type","description","name","isArray","debug","i","className","builtInMatches","exec","toString","call","JSON","stringify","_","Error","message","stack","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","cachegetUint32Memory0","getUint32Memory0","Uint32Array","getArrayU32FromWasm0","encode_arbitrary_bytes_as_metadatum","bytes","ptr0","len0","TransactionMetadatum","__wrap","decode_arbitrary_bytes_from_metadatum","metadata","retptr","r0","r1","v0","encode_json_str_to_metadatum","json","schema","decode_metadatum_to_json_str","metadatum","encrypt_with_password","password","salt","nonce","data","ptr1","len1","ptr2","len2","ptr3","len3","decrypt_with_password","make_daedalus_bootstrap_witness","tx_body_hash","addr","key","TransactionHash","ByronAddress","LegacyDaedalusPrivateKey","BootstrapWitness","make_icarus_bootstrap_witness","Bip32PrivateKey","make_vkey_witness","sk","PrivateKey","Vkeywitness","hash_auxiliary_data","auxiliary_data","AuxiliaryData","AuxiliaryDataHash","hash_transaction","tx_body","TransactionBody","hash_plutus_data","plutus_data","PlutusData","DataHash","hash_script_data","redeemers","language_views","datums","Redeemers","LanguageViews","PlutusList","ScriptDataHash","get_implicit_input","txbody","pool_deposit","key_deposit","BigNum","Value","get_deposit","min_ada_required","assets","minimum_utxo_val","data_hash","min_fee","tx","linear_fee","mem_price","step_price","Transaction","LinearFee","CertificateKind","Object","freeze","StakeRegistration","StakeDeregistration","StakeDelegation","PoolRegistration","PoolRetirement","GenesisKeyDelegation","MoveInstantaneousRewardsCert","MIRPot","Reserves","Treasury","MIRKind","ToOtherPot","ToStakeCredentials","RelayKind","SingleHostAddr","SingleHostName","MultiHostName","NativeScriptKind","ScriptPubkey","ScriptAll","ScriptAny","ScriptNOfK","TimelockStart","TimelockExpiry","ScriptHashNamespace","NativeScript","NetworkIdKind","Testnet","Mainnet","TransactionMetadatumKind","MetadataMap","MetadataList","Int","Bytes","Text","MetadataJsonSchema","NoConversions","BasicConversions","DetailedSchema","LanguageKind","PlutusV1","PlutusDataKind","ConstrPlutusData","Map","List","Integer","RedeemerTagKind","Spend","Mint","Cert","Reward","Address","this","__destroy_into_raw","prefix","create","prototype","bech_str","AssetName","AssetNames","index","elem","Assets","value","GeneralTransactionMetadata","NativeScripts","native_scripts","PlutusScripts","plutus_scripts","AuxiliaryDataSet","tx_index","BaseAddress","StakeCredential","network","payment","stake","BigInt","text","other","rhs_value","string","Bip32PublicKey","bech32_str","entropy","PublicKey","Block","Header","TransactionBodies","TransactionWitnessSets","header","transaction_bodies","transaction_witness_sets","auxiliary_data_set","invalid_transactions","passArray32ToWasm0","BlockHash","Vkey","Ed25519Signature","vkey","signature","chain_code","attributes","BootstrapWitnesses","s","protocol_magic","Certificate","stake_registration","stake_deregistration","stake_delegation","pool_registration","pool_retirement","genesis_key_delegation","move_instantaneous_rewards_cert","Certificates","tag","CostModel","operation","cost","Costmdls","Language","Languages","DNSRecordAorAAAA","dns_name","DNSRecordSRV","Ed25519KeyHash","Ed25519KeyHashes","input","EnterpriseAddress","ExUnitPrices","UnitInterval","ExUnits","steps","TransactionMetadatumLabels","GenesisDelegateHash","GenesisHash","GenesisHashes","VRFKeyHash","genesishash","genesis_delegate_hash","vrf_keyhash","HeaderBody","KESSignature","header_body","body_signature","VRFVKey","VRFCert","OperationalCert","ProtocolVersion","block_number","slot","prev_hash","issuer_vkey","vrf_vkey","nonce_vrf","leader_vrf","block_body_size","block_body_hash","operational_cert","protocol_version","Ipv4","Ipv6","KESVKey","coefficient","constant","MIRToStakeCredentials","cred","delta","StakeCredentials","ScriptHash","MintAssets","ScriptHashes","MoveInstantaneousReward","pot","amount","amounts","move_instantaneous_reward","MultiAsset","rhs_ma","namespace","script_pubkey","script_all","script_any","script_n_of_k","timelock_start","timelock_expiry","NetworkId","NetworkInfo","network_id","Nonce","hash","hot_vkey","sequence_number","kes_period","sigma","PlutusMap","constr_plutus_data","map","list","integer","PlutusScript","Pointer","cert_index","PointerAddress","PoolMetadata","URL","PoolMetadataHash","url","pool_metadata_hash","PoolParams","RewardAddress","Relays","operator","pledge","margin","reward_account","pool_owners","relays","pool_metadata","pool_params","pool_keyhash","epoch","ProposedProtocolParameterUpdates","ProtocolParamUpdate","minfee_a","minfee_b","max_block_body_size","max_tx_size","max_block_header_size","max_epoch","n_opt","pool_pledge_influence","expansion_rate","treasury_growth_rate","d","extra_entropy","ProtocolVersions","min_pool_cost","ada_per_utxo_byte","cost_models","execution_costs","max_tx_ex_units","max_block_ex_units","max_value_size","major","minor","PublicKeys","Redeemer","RedeemerTag","ex_units","Relay","single_host_addr","single_host_name","multi_host_name","RewardAddresses","n","addr_keyhash","port","ipv4","ipv6","stake_credential","Strings","TransactionWitnessSet","valid","body","witness_set","TransactionInputs","TransactionOutputs","certs","withdrawals","Withdrawals","update","Update","auxiliary_data_hash","validity_start_interval","mint","script_data_hash","collateral","required_signers","inputs","outputs","fee","ttl","TransactionBuilder","TransactionInput","address","output","TransactionOutput","price_mem","price_step","transaction_id","int","TransactionUnspentOutput","vkeys","Vkeywitnesses","bootstraps","numerator","denominator","proposed_protocol_parameter_updates","proof","coin","multiasset","rhs","pk","Vkeys","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbg_new_3a746f2619705add","Function","__wbg_call_f54d3a6dadb199ca","__wbindgen_jsval_eq","__wbg_self_ac379e780a0d8b94","self","__wbg_crypto_1e4302b85d4f64a2","crypto","__wbindgen_is_undefined","__wbg_getRandomValues_1b4ba144162a5c9e","getRandomValues","__wbg_require_6461b1e9a0d7c34a","__wbg_getRandomValues_1ef11e888e5228e9","arg2","__wbg_randomFillSync_1b52c8482374c55b","randomFillSync","__wbindgen_string_get","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","exports","originalModule","webpackPolyfill","children","defineProperty","enumerable","get","l"],"mappings":"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","file":"static/js/3.fdd797aa.chunk.js","sourcesContent":["import * as wasm from \"./cardano_serialization_lib_bg.wasm\";\r\nexport * from \"./cardano_serialization_lib_bg.js\";","import * as wasm from './cardano_serialization_lib_bg.wasm';\r\n\r\nconst heap = new Array(32).fill(undefined);\r\n\r\nheap.push(undefined, null, true, false);\r\n\r\nfunction getObject(idx) { return heap[idx]; }\r\n\r\nlet heap_next = heap.length;\r\n\r\nfunction dropObject(idx) {\r\n    if (idx < 36) return;\r\n    heap[idx] = heap_next;\r\n    heap_next = idx;\r\n}\r\n\r\nfunction takeObject(idx) {\r\n    const ret = getObject(idx);\r\n    dropObject(idx);\r\n    return ret;\r\n}\r\n\r\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\r\n\r\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\r\n\r\ncachedTextDecoder.decode();\r\n\r\nlet cachegetUint8Memory0 = null;\r\nfunction getUint8Memory0() {\r\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\r\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\r\n    }\r\n    return cachegetUint8Memory0;\r\n}\r\n\r\nfunction getStringFromWasm0(ptr, len) {\r\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\r\n}\r\n\r\nfunction addHeapObject(obj) {\r\n    if (heap_next === heap.length) heap.push(heap.length + 1);\r\n    const idx = heap_next;\r\n    heap_next = heap[idx];\r\n\r\n    heap[idx] = obj;\r\n    return idx;\r\n}\r\n\r\nlet WASM_VECTOR_LEN = 0;\r\n\r\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\r\n\r\nlet cachedTextEncoder = new lTextEncoder('utf-8');\r\n\r\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\r\n    ? function (arg, view) {\r\n    return cachedTextEncoder.encodeInto(arg, view);\r\n}\r\n    : function (arg, view) {\r\n    const buf = cachedTextEncoder.encode(arg);\r\n    view.set(buf);\r\n    return {\r\n        read: arg.length,\r\n        written: buf.length\r\n    };\r\n});\r\n\r\nfunction passStringToWasm0(arg, malloc, realloc) {\r\n\r\n    if (realloc === undefined) {\r\n        const buf = cachedTextEncoder.encode(arg);\r\n        const ptr = malloc(buf.length);\r\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\r\n        WASM_VECTOR_LEN = buf.length;\r\n        return ptr;\r\n    }\r\n\r\n    let len = arg.length;\r\n    let ptr = malloc(len);\r\n\r\n    const mem = getUint8Memory0();\r\n\r\n    let offset = 0;\r\n\r\n    for (; offset < len; offset++) {\r\n        const code = arg.charCodeAt(offset);\r\n        if (code > 0x7F) break;\r\n        mem[ptr + offset] = code;\r\n    }\r\n\r\n    if (offset !== len) {\r\n        if (offset !== 0) {\r\n            arg = arg.slice(offset);\r\n        }\r\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\r\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\r\n        const ret = encodeString(arg, view);\r\n\r\n        offset += ret.written;\r\n    }\r\n\r\n    WASM_VECTOR_LEN = offset;\r\n    return ptr;\r\n}\r\n\r\nfunction isLikeNone(x) {\r\n    return x === undefined || x === null;\r\n}\r\n\r\nlet cachegetInt32Memory0 = null;\r\nfunction getInt32Memory0() {\r\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\r\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\r\n    }\r\n    return cachegetInt32Memory0;\r\n}\r\n\r\nfunction debugString(val) {\r\n    // primitive types\r\n    const type = typeof val;\r\n    if (type == 'number' || type == 'boolean' || val == null) {\r\n        return  `${val}`;\r\n    }\r\n    if (type == 'string') {\r\n        return `\"${val}\"`;\r\n    }\r\n    if (type == 'symbol') {\r\n        const description = val.description;\r\n        if (description == null) {\r\n            return 'Symbol';\r\n        } else {\r\n            return `Symbol(${description})`;\r\n        }\r\n    }\r\n    if (type == 'function') {\r\n        const name = val.name;\r\n        if (typeof name == 'string' && name.length > 0) {\r\n            return `Function(${name})`;\r\n        } else {\r\n            return 'Function';\r\n        }\r\n    }\r\n    // objects\r\n    if (Array.isArray(val)) {\r\n        const length = val.length;\r\n        let debug = '[';\r\n        if (length > 0) {\r\n            debug += debugString(val[0]);\r\n        }\r\n        for(let i = 1; i < length; i++) {\r\n            debug += ', ' + debugString(val[i]);\r\n        }\r\n        debug += ']';\r\n        return debug;\r\n    }\r\n    // Test for built-in\r\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\r\n    let className;\r\n    if (builtInMatches.length > 1) {\r\n        className = builtInMatches[1];\r\n    } else {\r\n        // Failed to match the standard '[object ClassName]'\r\n        return toString.call(val);\r\n    }\r\n    if (className == 'Object') {\r\n        // we're a user defined class or Object\r\n        // JSON.stringify avoids problems with cycles, and is generally much\r\n        // easier than looping through ownProperties of `val`.\r\n        try {\r\n            return 'Object(' + JSON.stringify(val) + ')';\r\n        } catch (_) {\r\n            return 'Object';\r\n        }\r\n    }\r\n    // errors\r\n    if (val instanceof Error) {\r\n        return `${val.name}: ${val.message}\\n${val.stack}`;\r\n    }\r\n    // TODO we could test for more things here, like `Set`s and `Map`s.\r\n    return className;\r\n}\r\n\r\nfunction getArrayU8FromWasm0(ptr, len) {\r\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\r\n}\r\n\r\nfunction passArray8ToWasm0(arg, malloc) {\r\n    const ptr = malloc(arg.length * 1);\r\n    getUint8Memory0().set(arg, ptr / 1);\r\n    WASM_VECTOR_LEN = arg.length;\r\n    return ptr;\r\n}\r\n\r\nfunction _assertClass(instance, klass) {\r\n    if (!(instance instanceof klass)) {\r\n        throw new Error(`expected instance of ${klass.name}`);\r\n    }\r\n    return instance.ptr;\r\n}\r\n\r\nlet cachegetUint32Memory0 = null;\r\nfunction getUint32Memory0() {\r\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\r\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\r\n    }\r\n    return cachegetUint32Memory0;\r\n}\r\n\r\nfunction getArrayU32FromWasm0(ptr, len) {\r\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\r\n}\r\n\r\nfunction passArray32ToWasm0(arg, malloc) {\r\n    const ptr = malloc(arg.length * 4);\r\n    getUint32Memory0().set(arg, ptr / 4);\r\n    WASM_VECTOR_LEN = arg.length;\r\n    return ptr;\r\n}\r\n/**\r\n* @param {Uint8Array} bytes\r\n* @returns {TransactionMetadatum}\r\n*/\r\nexport function encode_arbitrary_bytes_as_metadatum(bytes) {\r\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n    var len0 = WASM_VECTOR_LEN;\r\n    var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\r\n    return TransactionMetadatum.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {TransactionMetadatum} metadata\r\n* @returns {Uint8Array}\r\n*/\r\nexport function decode_arbitrary_bytes_from_metadatum(metadata) {\r\n    try {\r\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n        _assertClass(metadata, TransactionMetadatum);\r\n        wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\r\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n        wasm.__wbindgen_free(r0, r1 * 1);\r\n        return v0;\r\n    } finally {\r\n        wasm.__wbindgen_add_to_stack_pointer(16);\r\n    }\r\n}\r\n\r\n/**\r\n* @param {string} json\r\n* @param {number} schema\r\n* @returns {TransactionMetadatum}\r\n*/\r\nexport function encode_json_str_to_metadatum(json, schema) {\r\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n    var len0 = WASM_VECTOR_LEN;\r\n    var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\r\n    return TransactionMetadatum.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {TransactionMetadatum} metadatum\r\n* @param {number} schema\r\n* @returns {string}\r\n*/\r\nexport function decode_metadatum_to_json_str(metadatum, schema) {\r\n    try {\r\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n        _assertClass(metadatum, TransactionMetadatum);\r\n        wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\r\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n        return getStringFromWasm0(r0, r1);\r\n    } finally {\r\n        wasm.__wbindgen_add_to_stack_pointer(16);\r\n        wasm.__wbindgen_free(r0, r1);\r\n    }\r\n}\r\n\r\n/**\r\n* @param {string} password\r\n* @param {string} salt\r\n* @param {string} nonce\r\n* @param {string} data\r\n* @returns {string}\r\n*/\r\nexport function encrypt_with_password(password, salt, nonce, data) {\r\n    try {\r\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len1 = WASM_VECTOR_LEN;\r\n        var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len2 = WASM_VECTOR_LEN;\r\n        var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len3 = WASM_VECTOR_LEN;\r\n        wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\r\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n        return getStringFromWasm0(r0, r1);\r\n    } finally {\r\n        wasm.__wbindgen_add_to_stack_pointer(16);\r\n        wasm.__wbindgen_free(r0, r1);\r\n    }\r\n}\r\n\r\n/**\r\n* @param {string} password\r\n* @param {string} data\r\n* @returns {string}\r\n*/\r\nexport function decrypt_with_password(password, data) {\r\n    try {\r\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len1 = WASM_VECTOR_LEN;\r\n        wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\r\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n        return getStringFromWasm0(r0, r1);\r\n    } finally {\r\n        wasm.__wbindgen_add_to_stack_pointer(16);\r\n        wasm.__wbindgen_free(r0, r1);\r\n    }\r\n}\r\n\r\n/**\r\n* @param {TransactionHash} tx_body_hash\r\n* @param {ByronAddress} addr\r\n* @param {LegacyDaedalusPrivateKey} key\r\n* @returns {BootstrapWitness}\r\n*/\r\nexport function make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\r\n    _assertClass(tx_body_hash, TransactionHash);\r\n    _assertClass(addr, ByronAddress);\r\n    _assertClass(key, LegacyDaedalusPrivateKey);\r\n    var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\r\n    return BootstrapWitness.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {TransactionHash} tx_body_hash\r\n* @param {ByronAddress} addr\r\n* @param {Bip32PrivateKey} key\r\n* @returns {BootstrapWitness}\r\n*/\r\nexport function make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\r\n    _assertClass(tx_body_hash, TransactionHash);\r\n    _assertClass(addr, ByronAddress);\r\n    _assertClass(key, Bip32PrivateKey);\r\n    var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\r\n    return BootstrapWitness.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {TransactionHash} tx_body_hash\r\n* @param {PrivateKey} sk\r\n* @returns {Vkeywitness}\r\n*/\r\nexport function make_vkey_witness(tx_body_hash, sk) {\r\n    _assertClass(tx_body_hash, TransactionHash);\r\n    _assertClass(sk, PrivateKey);\r\n    var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\r\n    return Vkeywitness.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {AuxiliaryData} auxiliary_data\r\n* @returns {AuxiliaryDataHash}\r\n*/\r\nexport function hash_auxiliary_data(auxiliary_data) {\r\n    _assertClass(auxiliary_data, AuxiliaryData);\r\n    var ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\r\n    return AuxiliaryDataHash.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {TransactionBody} tx_body\r\n* @returns {TransactionHash}\r\n*/\r\nexport function hash_transaction(tx_body) {\r\n    _assertClass(tx_body, TransactionBody);\r\n    var ret = wasm.hash_transaction(tx_body.ptr);\r\n    return TransactionHash.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {PlutusData} plutus_data\r\n* @returns {DataHash}\r\n*/\r\nexport function hash_plutus_data(plutus_data) {\r\n    _assertClass(plutus_data, PlutusData);\r\n    var ret = wasm.hash_plutus_data(plutus_data.ptr);\r\n    return DataHash.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {Redeemers} redeemers\r\n* @param {LanguageViews} language_views\r\n* @param {PlutusList | undefined} datums\r\n* @returns {ScriptDataHash}\r\n*/\r\nexport function hash_script_data(redeemers, language_views, datums) {\r\n    _assertClass(redeemers, Redeemers);\r\n    _assertClass(language_views, LanguageViews);\r\n    let ptr0 = 0;\r\n    if (!isLikeNone(datums)) {\r\n        _assertClass(datums, PlutusList);\r\n        ptr0 = datums.ptr;\r\n        datums.ptr = 0;\r\n    }\r\n    var ret = wasm.hash_script_data(redeemers.ptr, language_views.ptr, ptr0);\r\n    return ScriptDataHash.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {TransactionBody} txbody\r\n* @param {BigNum} pool_deposit\r\n* @param {BigNum} key_deposit\r\n* @returns {Value}\r\n*/\r\nexport function get_implicit_input(txbody, pool_deposit, key_deposit) {\r\n    _assertClass(txbody, TransactionBody);\r\n    _assertClass(pool_deposit, BigNum);\r\n    _assertClass(key_deposit, BigNum);\r\n    var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\r\n    return Value.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {TransactionBody} txbody\r\n* @param {BigNum} pool_deposit\r\n* @param {BigNum} key_deposit\r\n* @returns {BigNum}\r\n*/\r\nexport function get_deposit(txbody, pool_deposit, key_deposit) {\r\n    _assertClass(txbody, TransactionBody);\r\n    _assertClass(pool_deposit, BigNum);\r\n    _assertClass(key_deposit, BigNum);\r\n    var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\r\n    return BigNum.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {Value} assets\r\n* @param {BigNum} minimum_utxo_val\r\n* @param {DataHash | undefined} data_hash\r\n* @returns {BigNum}\r\n*/\r\nexport function min_ada_required(assets, minimum_utxo_val, data_hash) {\r\n    _assertClass(assets, Value);\r\n    _assertClass(minimum_utxo_val, BigNum);\r\n    let ptr0 = 0;\r\n    if (!isLikeNone(data_hash)) {\r\n        _assertClass(data_hash, DataHash);\r\n        ptr0 = data_hash.ptr;\r\n        data_hash.ptr = 0;\r\n    }\r\n    var ret = wasm.min_ada_required(assets.ptr, minimum_utxo_val.ptr, ptr0);\r\n    return BigNum.__wrap(ret);\r\n}\r\n\r\n/**\r\n* @param {Transaction} tx\r\n* @param {LinearFee} linear_fee\r\n* @param {number} mem_price\r\n* @param {number} step_price\r\n* @returns {BigNum}\r\n*/\r\nexport function min_fee(tx, linear_fee, mem_price, step_price) {\r\n    _assertClass(tx, Transaction);\r\n    _assertClass(linear_fee, LinearFee);\r\n    var ret = wasm.min_fee(tx.ptr, linear_fee.ptr, mem_price, step_price);\r\n    return BigNum.__wrap(ret);\r\n}\r\n\r\n/**\r\n*/\r\nexport const CertificateKind = Object.freeze({ StakeRegistration:0,\"0\":\"StakeRegistration\",StakeDeregistration:1,\"1\":\"StakeDeregistration\",StakeDelegation:2,\"2\":\"StakeDelegation\",PoolRegistration:3,\"3\":\"PoolRegistration\",PoolRetirement:4,\"4\":\"PoolRetirement\",GenesisKeyDelegation:5,\"5\":\"GenesisKeyDelegation\",MoveInstantaneousRewardsCert:6,\"6\":\"MoveInstantaneousRewardsCert\", });\r\n/**\r\n*/\r\nexport const MIRPot = Object.freeze({ Reserves:0,\"0\":\"Reserves\",Treasury:1,\"1\":\"Treasury\", });\r\n/**\r\n*/\r\nexport const MIRKind = Object.freeze({ ToOtherPot:0,\"0\":\"ToOtherPot\",ToStakeCredentials:1,\"1\":\"ToStakeCredentials\", });\r\n/**\r\n*/\r\nexport const RelayKind = Object.freeze({ SingleHostAddr:0,\"0\":\"SingleHostAddr\",SingleHostName:1,\"1\":\"SingleHostName\",MultiHostName:2,\"2\":\"MultiHostName\", });\r\n/**\r\n*/\r\nexport const NativeScriptKind = Object.freeze({ ScriptPubkey:0,\"0\":\"ScriptPubkey\",ScriptAll:1,\"1\":\"ScriptAll\",ScriptAny:2,\"2\":\"ScriptAny\",ScriptNOfK:3,\"3\":\"ScriptNOfK\",TimelockStart:4,\"4\":\"TimelockStart\",TimelockExpiry:5,\"5\":\"TimelockExpiry\", });\r\n/**\r\n* Each new language uses a different namespace for hashing its script\r\n* This is because you could have a language where the same bytes have different semantics\r\n* So this avoids scripts in different languages mapping to the same hash\r\n* Note that the enum value here is different than the enum value for deciding the cost model of a script\r\n*/\r\nexport const ScriptHashNamespace = Object.freeze({ NativeScript:0,\"0\":\"NativeScript\", });\r\n/**\r\n*/\r\nexport const NetworkIdKind = Object.freeze({ Testnet:0,\"0\":\"Testnet\",Mainnet:1,\"1\":\"Mainnet\", });\r\n/**\r\n*/\r\nexport const TransactionMetadatumKind = Object.freeze({ MetadataMap:0,\"0\":\"MetadataMap\",MetadataList:1,\"1\":\"MetadataList\",Int:2,\"2\":\"Int\",Bytes:3,\"3\":\"Bytes\",Text:4,\"4\":\"Text\", });\r\n/**\r\n*/\r\nexport const MetadataJsonSchema = Object.freeze({ NoConversions:0,\"0\":\"NoConversions\",BasicConversions:1,\"1\":\"BasicConversions\",DetailedSchema:2,\"2\":\"DetailedSchema\", });\r\n/**\r\n*/\r\nexport const LanguageKind = Object.freeze({ PlutusV1:0,\"0\":\"PlutusV1\", });\r\n/**\r\n*/\r\nexport const PlutusDataKind = Object.freeze({ ConstrPlutusData:0,\"0\":\"ConstrPlutusData\",Map:1,\"1\":\"Map\",List:2,\"2\":\"List\",Integer:3,\"3\":\"Integer\",Bytes:4,\"4\":\"Bytes\", });\r\n/**\r\n*/\r\nexport const RedeemerTagKind = Object.freeze({ Spend:0,\"0\":\"Spend\",Mint:1,\"1\":\"Mint\",Cert:2,\"2\":\"Cert\",Reward:3,\"3\":\"Reward\", });\r\n/**\r\n*/\r\nexport class Address {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Address.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_address_free(ptr);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} data\r\n    * @returns {Address}\r\n    */\r\n    static from_bytes(data) {\r\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.address_from_bytes(ptr0, len0);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.address_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string | undefined} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {Address}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.address_from_bech32(ptr0, len0);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    network_id() {\r\n        var ret = wasm.address_network_id(this.ptr);\r\n        return ret;\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class AssetName {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(AssetName.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_assetname_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.assetname_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {AssetName}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.assetname_from_bytes(ptr0, len0);\r\n        return AssetName.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} name\r\n    * @returns {AssetName}\r\n    */\r\n    static new(name) {\r\n        var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.assetname_new(ptr0, len0);\r\n        return AssetName.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    name() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.assetname_name(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class AssetNames {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(AssetNames.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_assetnames_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.assetnames_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {AssetNames}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.assetnames_from_bytes(ptr0, len0);\r\n        return AssetNames.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {AssetNames}\r\n    */\r\n    static new() {\r\n        var ret = wasm.assetnames_new();\r\n        return AssetNames.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.assetnames_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {AssetName}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.assetnames_get(this.ptr, index);\r\n        return AssetName.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {AssetName} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, AssetName);\r\n        wasm.assetnames_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Assets {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Assets.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_assets_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.assets_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Assets}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.assets_from_bytes(ptr0, len0);\r\n        return Assets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Assets}\r\n    */\r\n    static new() {\r\n        var ret = wasm.assets_new();\r\n        return Assets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.assets_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {AssetName} key\r\n    * @param {BigNum} value\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, AssetName);\r\n        _assertClass(value, BigNum);\r\n        var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {AssetName} key\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, AssetName);\r\n        var ret = wasm.assets_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {AssetNames}\r\n    */\r\n    keys() {\r\n        var ret = wasm.assets_keys(this.ptr);\r\n        return AssetNames.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class AuxiliaryData {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(AuxiliaryData.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_auxiliarydata_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.auxiliarydata_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {AuxiliaryData}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.auxiliarydata_from_bytes(ptr0, len0);\r\n        return AuxiliaryData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {AuxiliaryData}\r\n    */\r\n    static new() {\r\n        var ret = wasm.auxiliarydata_new();\r\n        return AuxiliaryData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {GeneralTransactionMetadata | undefined}\r\n    */\r\n    metadata() {\r\n        var ret = wasm.auxiliarydata_metadata(this.ptr);\r\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {GeneralTransactionMetadata} metadata\r\n    */\r\n    set_metadata(metadata) {\r\n        _assertClass(metadata, GeneralTransactionMetadata);\r\n        wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\r\n    }\r\n    /**\r\n    * @returns {NativeScripts | undefined}\r\n    */\r\n    native_scripts() {\r\n        var ret = wasm.auxiliarydata_native_scripts(this.ptr);\r\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {NativeScripts} native_scripts\r\n    */\r\n    set_native_scripts(native_scripts) {\r\n        _assertClass(native_scripts, NativeScripts);\r\n        wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\r\n    }\r\n    /**\r\n    * @returns {PlutusScripts | undefined}\r\n    */\r\n    plutus_scripts() {\r\n        var ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\r\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusScripts} plutus_scripts\r\n    */\r\n    set_plutus_scripts(plutus_scripts) {\r\n        _assertClass(plutus_scripts, PlutusScripts);\r\n        wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class AuxiliaryDataHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(AuxiliaryDataHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_auxiliarydatahash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {AuxiliaryDataHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.auxiliarydatahash_from_bech32(ptr0, len0);\r\n        return AuxiliaryDataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {AuxiliaryDataHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.auxiliarydatahash_from_bytes(ptr0, len0);\r\n        return AuxiliaryDataHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class AuxiliaryDataSet {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(AuxiliaryDataSet.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_auxiliarydataset_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {AuxiliaryDataSet}\r\n    */\r\n    static new() {\r\n        var ret = wasm.auxiliarydataset_new();\r\n        return AuxiliaryDataSet.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.auxiliarydataset_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} tx_index\r\n    * @param {AuxiliaryData} data\r\n    * @returns {AuxiliaryData | undefined}\r\n    */\r\n    insert(tx_index, data) {\r\n        _assertClass(data, AuxiliaryData);\r\n        var ret = wasm.auxiliarydataset_insert(this.ptr, tx_index, data.ptr);\r\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} tx_index\r\n    * @returns {AuxiliaryData | undefined}\r\n    */\r\n    get(tx_index) {\r\n        var ret = wasm.auxiliarydataset_get(this.ptr, tx_index);\r\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint32Array}\r\n    */\r\n    indices() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.auxiliarydataset_indices(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 4);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class BaseAddress {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(BaseAddress.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_baseaddress_free(ptr);\r\n    }\r\n    /**\r\n    * @param {number} network\r\n    * @param {StakeCredential} payment\r\n    * @param {StakeCredential} stake\r\n    * @returns {BaseAddress}\r\n    */\r\n    static new(network, payment, stake) {\r\n        _assertClass(payment, StakeCredential);\r\n        _assertClass(stake, StakeCredential);\r\n        var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\r\n        return BaseAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    payment_cred() {\r\n        var ret = wasm.baseaddress_payment_cred(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    stake_cred() {\r\n        var ret = wasm.baseaddress_stake_cred(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Address}\r\n    */\r\n    to_address() {\r\n        var ret = wasm.baseaddress_to_address(this.ptr);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Address} addr\r\n    * @returns {BaseAddress | undefined}\r\n    */\r\n    static from_address(addr) {\r\n        _assertClass(addr, Address);\r\n        var ret = wasm.baseaddress_from_address(addr.ptr);\r\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class BigInt {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(BigInt.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_bigint_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bigint_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {BigInt}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bigint_from_bytes(ptr0, len0);\r\n        return BigInt.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    as_u64() {\r\n        var ret = wasm.bigint_as_u64(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} text\r\n    * @returns {BigInt}\r\n    */\r\n    static from_str(text) {\r\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bigint_from_str(ptr0, len0);\r\n        return BigInt.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_str() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bigint_to_str(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class BigNum {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(BigNum.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_bignum_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bignum_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {BigNum}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} string\r\n    * @returns {BigNum}\r\n    */\r\n    static from_str(string) {\r\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bignum_from_str(ptr0, len0);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_str() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bignum_to_str(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    static zero() {\r\n        var ret = wasm.bignum_zero();\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} other\r\n    * @returns {BigNum}\r\n    */\r\n    checked_mul(other) {\r\n        _assertClass(other, BigNum);\r\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} other\r\n    * @returns {BigNum}\r\n    */\r\n    checked_div(other) {\r\n        _assertClass(other, BigNum);\r\n        var ret = wasm.bignum_checked_div(this.ptr, other.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} other\r\n    * @returns {BigNum}\r\n    */\r\n    checked_add(other) {\r\n        _assertClass(other, BigNum);\r\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} other\r\n    * @returns {BigNum}\r\n    */\r\n    checked_sub(other) {\r\n        _assertClass(other, BigNum);\r\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * returns 0 if it would otherwise underflow\r\n    * @param {BigNum} other\r\n    * @returns {BigNum}\r\n    */\r\n    clamped_sub(other) {\r\n        _assertClass(other, BigNum);\r\n        var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} rhs_value\r\n    * @returns {number}\r\n    */\r\n    compare(rhs_value) {\r\n        _assertClass(rhs_value, BigNum);\r\n        var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\r\n        return ret;\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Bip32PrivateKey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Bip32PrivateKey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_bip32privatekey_free(ptr);\r\n    }\r\n    /**\r\n    * derive this private key with the given index.\r\n    *\r\n    * # Security considerations\r\n    *\r\n    * * hard derivation index cannot be soft derived with the public key\r\n    *\r\n    * # Hard derivation vs Soft derivation\r\n    *\r\n    * If you pass an index below 0x80000000 then it is a soft derivation.\r\n    * The advantage of soft derivation is that it is possible to derive the\r\n    * public key too. I.e. derivation the private key with a soft derivation\r\n    * index and then retrieving the associated public key is equivalent to\r\n    * deriving the public key associated to the parent private key.\r\n    *\r\n    * Hard derivation index does not allow public key derivation.\r\n    *\r\n    * This is why deriving the private key should not fail while deriving\r\n    * the public key may fail (if the derivation index is invalid).\r\n    * @param {number} index\r\n    * @returns {Bip32PrivateKey}\r\n    */\r\n    derive(index) {\r\n        var ret = wasm.bip32privatekey_derive(this.ptr, index);\r\n        return Bip32PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * 128-byte xprv a key format in Cardano that some software still uses or requires\r\n    * the traditional 96-byte xprv is simply encoded as\r\n    * prv | chaincode\r\n    * however, because some software may not know how to compute a public key from a private key,\r\n    * the 128-byte inlines the public key in the following format\r\n    * prv | pub | chaincode\r\n    * so be careful if you see the term \"xprv\" as it could refer to either one\r\n    * our library does not require the pub (instead we compute the pub key when needed)\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Bip32PrivateKey}\r\n    */\r\n    static from_128_xprv(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\r\n        return Bip32PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * see from_128_xprv\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_128_xprv() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Bip32PrivateKey}\r\n    */\r\n    static generate_ed25519_bip32() {\r\n        var ret = wasm.bip32privatekey_generate_ed25519_bip32();\r\n        return Bip32PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PrivateKey}\r\n    */\r\n    to_raw_key() {\r\n        var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\r\n        return PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Bip32PublicKey}\r\n    */\r\n    to_public() {\r\n        var ret = wasm.bip32privatekey_to_public(this.ptr);\r\n        return Bip32PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Bip32PrivateKey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\r\n        return Bip32PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    as_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bip32privatekey_as_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech32_str\r\n    * @returns {Bip32PrivateKey}\r\n    */\r\n    static from_bech32(bech32_str) {\r\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\r\n        return Bip32PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_bech32() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bip32privatekey_to_bech32(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} entropy\r\n    * @param {Uint8Array} password\r\n    * @returns {Bip32PrivateKey}\r\n    */\r\n    static from_bip39_entropy(entropy, password) {\r\n        var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\r\n        var len1 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\r\n        return Bip32PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    chaincode() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bip32privatekey_chaincode(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Bip32PublicKey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Bip32PublicKey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_bip32publickey_free(ptr);\r\n    }\r\n    /**\r\n    * derive this public key with the given index.\r\n    *\r\n    * # Errors\r\n    *\r\n    * If the index is not a soft derivation index (< 0x80000000) then\r\n    * calling this method will fail.\r\n    *\r\n    * # Security considerations\r\n    *\r\n    * * hard derivation index cannot be soft derived with the public key\r\n    *\r\n    * # Hard derivation vs Soft derivation\r\n    *\r\n    * If you pass an index below 0x80000000 then it is a soft derivation.\r\n    * The advantage of soft derivation is that it is possible to derive the\r\n    * public key too. I.e. derivation the private key with a soft derivation\r\n    * index and then retrieving the associated public key is equivalent to\r\n    * deriving the public key associated to the parent private key.\r\n    *\r\n    * Hard derivation index does not allow public key derivation.\r\n    *\r\n    * This is why deriving the private key should not fail while deriving\r\n    * the public key may fail (if the derivation index is invalid).\r\n    * @param {number} index\r\n    * @returns {Bip32PublicKey}\r\n    */\r\n    derive(index) {\r\n        var ret = wasm.bip32publickey_derive(this.ptr, index);\r\n        return Bip32PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PublicKey}\r\n    */\r\n    to_raw_key() {\r\n        var ret = wasm.bip32publickey_to_raw_key(this.ptr);\r\n        return PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Bip32PublicKey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\r\n        return Bip32PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    as_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bip32publickey_as_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech32_str\r\n    * @returns {Bip32PublicKey}\r\n    */\r\n    static from_bech32(bech32_str) {\r\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\r\n        return Bip32PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_bech32() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bip32publickey_to_bech32(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    chaincode() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bip32publickey_chaincode(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Block {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Block.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_block_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.block_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Block}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.block_from_bytes(ptr0, len0);\r\n        return Block.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Header}\r\n    */\r\n    header() {\r\n        var ret = wasm.block_header(this.ptr);\r\n        return Header.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionBodies}\r\n    */\r\n    transaction_bodies() {\r\n        var ret = wasm.block_transaction_bodies(this.ptr);\r\n        return TransactionBodies.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionWitnessSets}\r\n    */\r\n    transaction_witness_sets() {\r\n        var ret = wasm.block_transaction_witness_sets(this.ptr);\r\n        return TransactionWitnessSets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {AuxiliaryDataSet}\r\n    */\r\n    auxiliary_data_set() {\r\n        var ret = wasm.block_auxiliary_data_set(this.ptr);\r\n        return AuxiliaryDataSet.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint32Array}\r\n    */\r\n    invalid_transactions() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.block_invalid_transactions(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 4);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Header} header\r\n    * @param {TransactionBodies} transaction_bodies\r\n    * @param {TransactionWitnessSets} transaction_witness_sets\r\n    * @param {AuxiliaryDataSet} auxiliary_data_set\r\n    * @param {Uint32Array} invalid_transactions\r\n    * @returns {Block}\r\n    */\r\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\r\n        _assertClass(header, Header);\r\n        _assertClass(transaction_bodies, TransactionBodies);\r\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\r\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\r\n        var ptr0 = passArray32ToWasm0(invalid_transactions, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, ptr0, len0);\r\n        return Block.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class BlockHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(BlockHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_blockhash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.blockhash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.blockhash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {BlockHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.blockhash_from_bech32(ptr0, len0);\r\n        return BlockHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {BlockHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.blockhash_from_bytes(ptr0, len0);\r\n        return BlockHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class BootstrapWitness {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(BootstrapWitness.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_bootstrapwitness_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {BootstrapWitness}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\r\n        return BootstrapWitness.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Vkey}\r\n    */\r\n    vkey() {\r\n        var ret = wasm.bootstrapwitness_vkey(this.ptr);\r\n        return Vkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519Signature}\r\n    */\r\n    signature() {\r\n        var ret = wasm.bootstrapwitness_signature(this.ptr);\r\n        return Ed25519Signature.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    chain_code() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    attributes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Vkey} vkey\r\n    * @param {Ed25519Signature} signature\r\n    * @param {Uint8Array} chain_code\r\n    * @param {Uint8Array} attributes\r\n    * @returns {BootstrapWitness}\r\n    */\r\n    static new(vkey, signature, chain_code, attributes) {\r\n        _assertClass(vkey, Vkey);\r\n        _assertClass(signature, Ed25519Signature);\r\n        var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\r\n        var len1 = WASM_VECTOR_LEN;\r\n        var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\r\n        return BootstrapWitness.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class BootstrapWitnesses {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(BootstrapWitnesses.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_bootstrapwitnesses_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {BootstrapWitnesses}\r\n    */\r\n    static new() {\r\n        var ret = wasm.bootstrapwitnesses_new();\r\n        return BootstrapWitnesses.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {BootstrapWitness}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\r\n        return BootstrapWitness.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BootstrapWitness} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, BootstrapWitness);\r\n        wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ByronAddress {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ByronAddress.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_byronaddress_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_base58() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.byronaddress_to_base58(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.byronaddress_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ByronAddress}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.byronaddress_from_bytes(ptr0, len0);\r\n        return ByronAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * returns the byron protocol magic embedded in the address, or mainnet id if none is present\r\n    * note: for bech32 addresses, you need to use network_id instead\r\n    * @returns {number}\r\n    */\r\n    byron_protocol_magic() {\r\n        var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    attributes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.byronaddress_attributes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    network_id() {\r\n        var ret = wasm.byronaddress_network_id(this.ptr);\r\n        return ret;\r\n    }\r\n    /**\r\n    * @param {string} s\r\n    * @returns {ByronAddress}\r\n    */\r\n    static from_base58(s) {\r\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.byronaddress_from_base58(ptr0, len0);\r\n        return ByronAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Bip32PublicKey} key\r\n    * @param {number} protocol_magic\r\n    * @returns {ByronAddress}\r\n    */\r\n    static icarus_from_key(key, protocol_magic) {\r\n        _assertClass(key, Bip32PublicKey);\r\n        var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\r\n        return ByronAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} s\r\n    * @returns {boolean}\r\n    */\r\n    static is_valid(s) {\r\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.byronaddress_is_valid(ptr0, len0);\r\n        return ret !== 0;\r\n    }\r\n    /**\r\n    * @returns {Address}\r\n    */\r\n    to_address() {\r\n        var ret = wasm.byronaddress_to_address(this.ptr);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Address} addr\r\n    * @returns {ByronAddress | undefined}\r\n    */\r\n    static from_address(addr) {\r\n        _assertClass(addr, Address);\r\n        var ret = wasm.byronaddress_from_address(addr.ptr);\r\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Certificate {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Certificate.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_certificate_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.certificate_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Certificate}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.certificate_from_bytes(ptr0, len0);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeRegistration} stake_registration\r\n    * @returns {Certificate}\r\n    */\r\n    static new_stake_registration(stake_registration) {\r\n        _assertClass(stake_registration, StakeRegistration);\r\n        var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeDeregistration} stake_deregistration\r\n    * @returns {Certificate}\r\n    */\r\n    static new_stake_deregistration(stake_deregistration) {\r\n        _assertClass(stake_deregistration, StakeDeregistration);\r\n        var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeDelegation} stake_delegation\r\n    * @returns {Certificate}\r\n    */\r\n    static new_stake_delegation(stake_delegation) {\r\n        _assertClass(stake_delegation, StakeDelegation);\r\n        var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PoolRegistration} pool_registration\r\n    * @returns {Certificate}\r\n    */\r\n    static new_pool_registration(pool_registration) {\r\n        _assertClass(pool_registration, PoolRegistration);\r\n        var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PoolRetirement} pool_retirement\r\n    * @returns {Certificate}\r\n    */\r\n    static new_pool_retirement(pool_retirement) {\r\n        _assertClass(pool_retirement, PoolRetirement);\r\n        var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {GenesisKeyDelegation} genesis_key_delegation\r\n    * @returns {Certificate}\r\n    */\r\n    static new_genesis_key_delegation(genesis_key_delegation) {\r\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\r\n        var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\r\n    * @returns {Certificate}\r\n    */\r\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\r\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\r\n        var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.certificate_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {StakeRegistration | undefined}\r\n    */\r\n    as_stake_registration() {\r\n        var ret = wasm.certificate_as_stake_registration(this.ptr);\r\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeDeregistration | undefined}\r\n    */\r\n    as_stake_deregistration() {\r\n        var ret = wasm.certificate_as_stake_deregistration(this.ptr);\r\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeDelegation | undefined}\r\n    */\r\n    as_stake_delegation() {\r\n        var ret = wasm.certificate_as_stake_delegation(this.ptr);\r\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PoolRegistration | undefined}\r\n    */\r\n    as_pool_registration() {\r\n        var ret = wasm.certificate_as_pool_registration(this.ptr);\r\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PoolRetirement | undefined}\r\n    */\r\n    as_pool_retirement() {\r\n        var ret = wasm.certificate_as_pool_retirement(this.ptr);\r\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {GenesisKeyDelegation | undefined}\r\n    */\r\n    as_genesis_key_delegation() {\r\n        var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\r\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MoveInstantaneousRewardsCert | undefined}\r\n    */\r\n    as_move_instantaneous_rewards_cert() {\r\n        var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\r\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Certificates {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Certificates.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_certificates_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.certificates_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Certificates}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.certificates_from_bytes(ptr0, len0);\r\n        return Certificates.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Certificates}\r\n    */\r\n    static new() {\r\n        var ret = wasm.certificates_new();\r\n        return Certificates.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.certificates_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {Certificate}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.certificates_get(this.ptr, index);\r\n        return Certificate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Certificate} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, Certificate);\r\n        wasm.certificates_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ConstrPlutusData {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ConstrPlutusData.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_constrplutusdata_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.constrplutusdata_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ConstrPlutusData}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.constrplutusdata_from_bytes(ptr0, len0);\r\n        return ConstrPlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Int}\r\n    */\r\n    tag() {\r\n        var ret = wasm.constrplutusdata_tag(this.ptr);\r\n        return Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusList}\r\n    */\r\n    data() {\r\n        var ret = wasm.constrplutusdata_data(this.ptr);\r\n        return PlutusList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Int} tag\r\n    * @param {PlutusList} data\r\n    * @returns {ConstrPlutusData}\r\n    */\r\n    static new(tag, data) {\r\n        _assertClass(tag, Int);\r\n        var ptr0 = tag.ptr;\r\n        tag.ptr = 0;\r\n        _assertClass(data, PlutusList);\r\n        var ret = wasm.constrplutusdata_new(ptr0, data.ptr);\r\n        return ConstrPlutusData.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class CostModel {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(CostModel.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_costmodel_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.costmodel_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {CostModel}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.costmodel_from_bytes(ptr0, len0);\r\n        return CostModel.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {CostModel}\r\n    */\r\n    static new() {\r\n        var ret = wasm.costmodel_new();\r\n        return CostModel.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} operation\r\n    * @param {Int} cost\r\n    * @returns {Int}\r\n    */\r\n    set(operation, cost) {\r\n        _assertClass(cost, Int);\r\n        var ret = wasm.costmodel_set(this.ptr, operation, cost.ptr);\r\n        return Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} operation\r\n    * @returns {Int}\r\n    */\r\n    get(operation) {\r\n        var ret = wasm.costmodel_get(this.ptr, operation);\r\n        return Int.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Costmdls {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Costmdls.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_costmdls_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.costmdls_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Costmdls}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.costmdls_from_bytes(ptr0, len0);\r\n        return Costmdls.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Costmdls}\r\n    */\r\n    static new() {\r\n        var ret = wasm.costmdls_new();\r\n        return Costmdls.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.costmdls_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {Language} key\r\n    * @param {CostModel} value\r\n    * @returns {CostModel | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, Language);\r\n        _assertClass(value, CostModel);\r\n        var ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Language} key\r\n    * @returns {CostModel | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, Language);\r\n        var ret = wasm.costmdls_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Languages}\r\n    */\r\n    keys() {\r\n        var ret = wasm.costmdls_keys(this.ptr);\r\n        return Languages.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class DNSRecordAorAAAA {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_dnsrecordaoraaaa_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {DNSRecordAorAAAA}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\r\n        return DNSRecordAorAAAA.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} dns_name\r\n    * @returns {DNSRecordAorAAAA}\r\n    */\r\n    static new(dns_name) {\r\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\r\n        return DNSRecordAorAAAA.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    record() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class DNSRecordSRV {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(DNSRecordSRV.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_dnsrecordsrv_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {DNSRecordSRV}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\r\n        return DNSRecordSRV.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} dns_name\r\n    * @returns {DNSRecordSRV}\r\n    */\r\n    static new(dns_name) {\r\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.dnsrecordsrv_new(ptr0, len0);\r\n        return DNSRecordSRV.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    record() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.dnsrecordsrv_record(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class DataHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(DataHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_datahash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.datahash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.datahash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {DataHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.datahash_from_bech32(ptr0, len0);\r\n        return DataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {DataHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.datahash_from_bytes(ptr0, len0);\r\n        return DataHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Ed25519KeyHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Ed25519KeyHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_ed25519keyhash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Ed25519KeyHashes {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Ed25519KeyHashes.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_ed25519keyhashes_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Ed25519KeyHashes}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\r\n        return Ed25519KeyHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHashes}\r\n    */\r\n    static new() {\r\n        var ret = wasm.ed25519keyhashes_new();\r\n        return Ed25519KeyHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.ed25519keyhashes_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.ed25519keyhashes_get(this.ptr, index);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHash} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, Ed25519KeyHash);\r\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Ed25519Signature {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Ed25519Signature.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_ed25519signature_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ed25519signature_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_bech32() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ed25519signature_to_bech32(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_hex() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ed25519signature_to_hex(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech32_str\r\n    * @returns {Ed25519Signature}\r\n    */\r\n    static from_bech32(bech32_str) {\r\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\r\n        return Ed25519Signature.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} input\r\n    * @returns {Ed25519Signature}\r\n    */\r\n    static from_hex(input) {\r\n        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ed25519signature_from_hex(ptr0, len0);\r\n        return Ed25519Signature.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Ed25519Signature}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\r\n        return Ed25519Signature.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class EnterpriseAddress {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(EnterpriseAddress.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_enterpriseaddress_free(ptr);\r\n    }\r\n    /**\r\n    * @param {number} network\r\n    * @param {StakeCredential} payment\r\n    * @returns {EnterpriseAddress}\r\n    */\r\n    static new(network, payment) {\r\n        _assertClass(payment, StakeCredential);\r\n        var ret = wasm.enterpriseaddress_new(network, payment.ptr);\r\n        return EnterpriseAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    payment_cred() {\r\n        var ret = wasm.enterpriseaddress_payment_cred(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Address}\r\n    */\r\n    to_address() {\r\n        var ret = wasm.enterpriseaddress_to_address(this.ptr);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Address} addr\r\n    * @returns {EnterpriseAddress | undefined}\r\n    */\r\n    static from_address(addr) {\r\n        _assertClass(addr, Address);\r\n        var ret = wasm.enterpriseaddress_from_address(addr.ptr);\r\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ExUnitPrices {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ExUnitPrices.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_exunitprices_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.exunitprices_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ExUnitPrices}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.exunitprices_from_bytes(ptr0, len0);\r\n        return ExUnitPrices.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {UnitInterval}\r\n    */\r\n    mem_price() {\r\n        var ret = wasm.exunitprices_mem_price(this.ptr);\r\n        return UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {UnitInterval}\r\n    */\r\n    step_price() {\r\n        var ret = wasm.exunitprices_step_price(this.ptr);\r\n        return UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {UnitInterval} mem_price\r\n    * @param {UnitInterval} step_price\r\n    * @returns {ExUnitPrices}\r\n    */\r\n    static new(mem_price, step_price) {\r\n        _assertClass(mem_price, UnitInterval);\r\n        _assertClass(step_price, UnitInterval);\r\n        var ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\r\n        return ExUnitPrices.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ExUnits {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ExUnits.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_exunits_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.exunits_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ExUnits}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.exunits_from_bytes(ptr0, len0);\r\n        return ExUnits.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    mem() {\r\n        var ret = wasm.exunits_mem(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    steps() {\r\n        var ret = wasm.exunits_steps(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} mem\r\n    * @param {BigNum} steps\r\n    * @returns {ExUnits}\r\n    */\r\n    static new(mem, steps) {\r\n        _assertClass(mem, BigNum);\r\n        _assertClass(steps, BigNum);\r\n        var ret = wasm.exunits_new(mem.ptr, steps.ptr);\r\n        return ExUnits.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class GeneralTransactionMetadata {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_generaltransactionmetadata_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {GeneralTransactionMetadata}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\r\n        return GeneralTransactionMetadata.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {GeneralTransactionMetadata}\r\n    */\r\n    static new() {\r\n        var ret = wasm.generaltransactionmetadata_new();\r\n        return GeneralTransactionMetadata.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.generaltransactionmetadata_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {BigNum} key\r\n    * @param {TransactionMetadatum} value\r\n    * @returns {TransactionMetadatum | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, BigNum);\r\n        _assertClass(value, TransactionMetadatum);\r\n        var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} key\r\n    * @returns {TransactionMetadatum | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, BigNum);\r\n        var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionMetadatumLabels}\r\n    */\r\n    keys() {\r\n        var ret = wasm.generaltransactionmetadata_keys(this.ptr);\r\n        return TransactionMetadatumLabels.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class GenesisDelegateHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(GenesisDelegateHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_genesisdelegatehash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.genesisdelegatehash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {GenesisDelegateHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\r\n        return GenesisDelegateHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {GenesisDelegateHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\r\n        return GenesisDelegateHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class GenesisHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(GenesisHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_genesishash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.genesishash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.genesishash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {GenesisHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.genesishash_from_bech32(ptr0, len0);\r\n        return GenesisHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {GenesisHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.genesishash_from_bytes(ptr0, len0);\r\n        return GenesisHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class GenesisHashes {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(GenesisHashes.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_genesishashes_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.genesishashes_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {GenesisHashes}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.genesishashes_from_bytes(ptr0, len0);\r\n        return GenesisHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {GenesisHashes}\r\n    */\r\n    static new() {\r\n        var ret = wasm.genesishashes_new();\r\n        return GenesisHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.genesishashes_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {GenesisHash}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.genesishashes_get(this.ptr, index);\r\n        return GenesisHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {GenesisHash} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, GenesisHash);\r\n        wasm.genesishashes_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class GenesisKeyDelegation {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(GenesisKeyDelegation.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_genesiskeydelegation_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {GenesisKeyDelegation}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\r\n        return GenesisKeyDelegation.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {GenesisHash}\r\n    */\r\n    genesishash() {\r\n        var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\r\n        return GenesisHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {GenesisDelegateHash}\r\n    */\r\n    genesis_delegate_hash() {\r\n        var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\r\n        return GenesisDelegateHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {VRFKeyHash}\r\n    */\r\n    vrf_keyhash() {\r\n        var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\r\n        return VRFKeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {GenesisHash} genesishash\r\n    * @param {GenesisDelegateHash} genesis_delegate_hash\r\n    * @param {VRFKeyHash} vrf_keyhash\r\n    * @returns {GenesisKeyDelegation}\r\n    */\r\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\r\n        _assertClass(genesishash, GenesisHash);\r\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\r\n        _assertClass(vrf_keyhash, VRFKeyHash);\r\n        var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\r\n        return GenesisKeyDelegation.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Header {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Header.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_header_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.header_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Header}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.header_from_bytes(ptr0, len0);\r\n        return Header.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {HeaderBody}\r\n    */\r\n    header_body() {\r\n        var ret = wasm.header_header_body(this.ptr);\r\n        return HeaderBody.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {KESSignature}\r\n    */\r\n    body_signature() {\r\n        var ret = wasm.header_body_signature(this.ptr);\r\n        return KESSignature.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {HeaderBody} header_body\r\n    * @param {KESSignature} body_signature\r\n    * @returns {Header}\r\n    */\r\n    static new(header_body, body_signature) {\r\n        _assertClass(header_body, HeaderBody);\r\n        _assertClass(body_signature, KESSignature);\r\n        var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\r\n        return Header.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class HeaderBody {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(HeaderBody.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_headerbody_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.headerbody_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {HeaderBody}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.headerbody_from_bytes(ptr0, len0);\r\n        return HeaderBody.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    block_number() {\r\n        var ret = wasm.headerbody_block_number(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    slot() {\r\n        var ret = wasm.headerbody_slot(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {BlockHash | undefined}\r\n    */\r\n    prev_hash() {\r\n        var ret = wasm.headerbody_prev_hash(this.ptr);\r\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Vkey}\r\n    */\r\n    issuer_vkey() {\r\n        var ret = wasm.headerbody_issuer_vkey(this.ptr);\r\n        return Vkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {VRFVKey}\r\n    */\r\n    vrf_vkey() {\r\n        var ret = wasm.headerbody_vrf_vkey(this.ptr);\r\n        return VRFVKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {VRFCert}\r\n    */\r\n    nonce_vrf() {\r\n        var ret = wasm.headerbody_nonce_vrf(this.ptr);\r\n        return VRFCert.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {VRFCert}\r\n    */\r\n    leader_vrf() {\r\n        var ret = wasm.headerbody_leader_vrf(this.ptr);\r\n        return VRFCert.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    block_body_size() {\r\n        var ret = wasm.headerbody_block_body_size(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {BlockHash}\r\n    */\r\n    block_body_hash() {\r\n        var ret = wasm.headerbody_block_body_hash(this.ptr);\r\n        return BlockHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {OperationalCert}\r\n    */\r\n    operational_cert() {\r\n        var ret = wasm.headerbody_operational_cert(this.ptr);\r\n        return OperationalCert.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ProtocolVersion}\r\n    */\r\n    protocol_version() {\r\n        var ret = wasm.headerbody_protocol_version(this.ptr);\r\n        return ProtocolVersion.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} block_number\r\n    * @param {number} slot\r\n    * @param {BlockHash | undefined} prev_hash\r\n    * @param {Vkey} issuer_vkey\r\n    * @param {VRFVKey} vrf_vkey\r\n    * @param {VRFCert} nonce_vrf\r\n    * @param {VRFCert} leader_vrf\r\n    * @param {number} block_body_size\r\n    * @param {BlockHash} block_body_hash\r\n    * @param {OperationalCert} operational_cert\r\n    * @param {ProtocolVersion} protocol_version\r\n    * @returns {HeaderBody}\r\n    */\r\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\r\n        let ptr0 = 0;\r\n        if (!isLikeNone(prev_hash)) {\r\n            _assertClass(prev_hash, BlockHash);\r\n            ptr0 = prev_hash.ptr;\r\n            prev_hash.ptr = 0;\r\n        }\r\n        _assertClass(issuer_vkey, Vkey);\r\n        _assertClass(vrf_vkey, VRFVKey);\r\n        _assertClass(nonce_vrf, VRFCert);\r\n        _assertClass(leader_vrf, VRFCert);\r\n        _assertClass(block_body_hash, BlockHash);\r\n        _assertClass(operational_cert, OperationalCert);\r\n        _assertClass(protocol_version, ProtocolVersion);\r\n        var ret = wasm.headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\r\n        return HeaderBody.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Int {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Int.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_int_free(ptr);\r\n    }\r\n    /**\r\n    * @param {BigNum} x\r\n    * @returns {Int}\r\n    */\r\n    static new(x) {\r\n        _assertClass(x, BigNum);\r\n        var ret = wasm.int_new(x.ptr);\r\n        return Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} x\r\n    * @returns {Int}\r\n    */\r\n    static new_negative(x) {\r\n        _assertClass(x, BigNum);\r\n        var ret = wasm.int_new_negative(x.ptr);\r\n        return Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} x\r\n    * @returns {Int}\r\n    */\r\n    static new_i32(x) {\r\n        var ret = wasm.int_new_i32(x);\r\n        return Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {boolean}\r\n    */\r\n    is_positive() {\r\n        var ret = wasm.int_is_positive(this.ptr);\r\n        return ret !== 0;\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    as_positive() {\r\n        var ret = wasm.int_as_positive(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    as_negative() {\r\n        var ret = wasm.int_as_negative(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    as_i32() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.int_as_i32(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Ipv4 {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Ipv4.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_ipv4_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ipv4_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Ipv4}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ipv4_from_bytes(ptr0, len0);\r\n        return Ipv4.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} data\r\n    * @returns {Ipv4}\r\n    */\r\n    static new(data) {\r\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ipv4_new(ptr0, len0);\r\n        return Ipv4.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    ip() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ipv4_ip(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Ipv6 {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Ipv6.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_ipv6_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ipv6_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Ipv6}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ipv6_from_bytes(ptr0, len0);\r\n        return Ipv6.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} data\r\n    * @returns {Ipv6}\r\n    */\r\n    static new(data) {\r\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.ipv6_new(ptr0, len0);\r\n        return Ipv6.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    ip() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.ipv6_ip(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class KESSignature {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(KESSignature.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_kessignature_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.kessignature_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {KESSignature}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.kessignature_from_bytes(ptr0, len0);\r\n        return KESSignature.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class KESVKey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(KESVKey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_kesvkey_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.kesvkey_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {KESVKey}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.kesvkey_from_bech32(ptr0, len0);\r\n        return KESVKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {KESVKey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.kesvkey_from_bytes(ptr0, len0);\r\n        return KESVKey.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Language {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Language.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_language_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.language_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Language}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.language_from_bytes(ptr0, len0);\r\n        return Language.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Language}\r\n    */\r\n    static new_plutus_v1() {\r\n        var ret = wasm.language_new_plutus_v1();\r\n        return Language.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.language_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class LanguageViews {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(LanguageViews.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_languageviews_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.languageviews_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {LanguageViews}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.languageviews_from_bytes(ptr0, len0);\r\n        return LanguageViews.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {LanguageViews}\r\n    */\r\n    static new(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.languageviews_new(ptr0, len0);\r\n        return LanguageViews.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.languageviews_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Languages {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Languages.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_languages_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Languages}\r\n    */\r\n    static new() {\r\n        var ret = wasm.languages_new();\r\n        return Languages.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.languages_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {Language}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.languages_get(this.ptr, index);\r\n        return Language.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Language} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, Language);\r\n        var ptr0 = elem.ptr;\r\n        elem.ptr = 0;\r\n        wasm.languages_add(this.ptr, ptr0);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class LegacyDaedalusPrivateKey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_legacydaedalusprivatekey_free(ptr);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {LegacyDaedalusPrivateKey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\r\n        return LegacyDaedalusPrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    as_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    chaincode() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class LinearFee {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(LinearFee.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_linearfee_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    constant() {\r\n        var ret = wasm.linearfee_constant(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    coefficient() {\r\n        var ret = wasm.linearfee_coefficient(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} coefficient\r\n    * @param {BigNum} constant\r\n    * @returns {LinearFee}\r\n    */\r\n    static new(coefficient, constant) {\r\n        _assertClass(coefficient, BigNum);\r\n        _assertClass(constant, BigNum);\r\n        var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\r\n        return LinearFee.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MIRToStakeCredentials {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MIRToStakeCredentials.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_mirtostakecredentials_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {MIRToStakeCredentials}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.mirtostakecredentials_from_bytes(ptr0, len0);\r\n        return MIRToStakeCredentials.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MIRToStakeCredentials}\r\n    */\r\n    static new() {\r\n        var ret = wasm.mirtostakecredentials_new();\r\n        return MIRToStakeCredentials.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.mirtostakecredentials_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {StakeCredential} cred\r\n    * @param {Int} delta\r\n    * @returns {Int | undefined}\r\n    */\r\n    insert(cred, delta) {\r\n        _assertClass(cred, StakeCredential);\r\n        _assertClass(delta, Int);\r\n        var ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\r\n        return ret === 0 ? undefined : Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeCredential} cred\r\n    * @returns {Int | undefined}\r\n    */\r\n    get(cred) {\r\n        _assertClass(cred, StakeCredential);\r\n        var ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\r\n        return ret === 0 ? undefined : Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredentials}\r\n    */\r\n    keys() {\r\n        var ret = wasm.mirtostakecredentials_keys(this.ptr);\r\n        return StakeCredentials.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MetadataList {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MetadataList.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_metadatalist_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.metadatalist_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {MetadataList}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.metadatalist_from_bytes(ptr0, len0);\r\n        return MetadataList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MetadataList}\r\n    */\r\n    static new() {\r\n        var ret = wasm.metadatalist_new();\r\n        return MetadataList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.metadatalist_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.metadatalist_get(this.ptr, index);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionMetadatum} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, TransactionMetadatum);\r\n        wasm.metadatalist_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MetadataMap {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MetadataMap.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_metadatamap_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.metadatamap_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {MetadataMap}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.metadatamap_from_bytes(ptr0, len0);\r\n        return MetadataMap.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MetadataMap}\r\n    */\r\n    static new() {\r\n        var ret = wasm.metadatamap_new();\r\n        return MetadataMap.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.metadatamap_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {TransactionMetadatum} key\r\n    * @param {TransactionMetadatum} value\r\n    * @returns {TransactionMetadatum | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, TransactionMetadatum);\r\n        _assertClass(value, TransactionMetadatum);\r\n        var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} key\r\n    * @param {TransactionMetadatum} value\r\n    * @returns {TransactionMetadatum | undefined}\r\n    */\r\n    insert_str(key, value) {\r\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        _assertClass(value, TransactionMetadatum);\r\n        var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\r\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} key\r\n    * @param {TransactionMetadatum} value\r\n    * @returns {TransactionMetadatum | undefined}\r\n    */\r\n    insert_i32(key, value) {\r\n        _assertClass(value, TransactionMetadatum);\r\n        var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\r\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionMetadatum} key\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, TransactionMetadatum);\r\n        var ret = wasm.metadatamap_get(this.ptr, key.ptr);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} key\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    get_str(key) {\r\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} key\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    get_i32(key) {\r\n        var ret = wasm.metadatamap_get_i32(this.ptr, key);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionMetadatum} key\r\n    * @returns {boolean}\r\n    */\r\n    has(key) {\r\n        _assertClass(key, TransactionMetadatum);\r\n        var ret = wasm.metadatamap_has(this.ptr, key.ptr);\r\n        return ret !== 0;\r\n    }\r\n    /**\r\n    * @returns {MetadataList}\r\n    */\r\n    keys() {\r\n        var ret = wasm.metadatamap_keys(this.ptr);\r\n        return MetadataList.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Mint {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Mint.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_mint_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.mint_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Mint}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.mint_from_bytes(ptr0, len0);\r\n        return Mint.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Mint}\r\n    */\r\n    static new() {\r\n        var ret = wasm.mint_new();\r\n        return Mint.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.mint_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {ScriptHash} key\r\n    * @param {MintAssets} value\r\n    * @returns {MintAssets | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, ScriptHash);\r\n        _assertClass(value, MintAssets);\r\n        var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptHash} key\r\n    * @returns {MintAssets | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, ScriptHash);\r\n        var ret = wasm.mint_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ScriptHashes}\r\n    */\r\n    keys() {\r\n        var ret = wasm.mint_keys(this.ptr);\r\n        return ScriptHashes.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MintAssets {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MintAssets.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_mintassets_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {MintAssets}\r\n    */\r\n    static new() {\r\n        var ret = wasm.mintassets_new();\r\n        return MintAssets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.mintassets_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {AssetName} key\r\n    * @param {Int} value\r\n    * @returns {Int | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, AssetName);\r\n        _assertClass(value, Int);\r\n        var ptr0 = value.ptr;\r\n        value.ptr = 0;\r\n        var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\r\n        return ret === 0 ? undefined : Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {AssetName} key\r\n    * @returns {Int | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, AssetName);\r\n        var ret = wasm.mintassets_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {AssetNames}\r\n    */\r\n    keys() {\r\n        var ret = wasm.mintassets_keys(this.ptr);\r\n        return AssetNames.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MoveInstantaneousReward {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MoveInstantaneousReward.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_moveinstantaneousreward_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {MoveInstantaneousReward}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\r\n        return MoveInstantaneousReward.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} pot\r\n    * @param {BigNum} amount\r\n    * @returns {MoveInstantaneousReward}\r\n    */\r\n    static new_to_other_pot(pot, amount) {\r\n        _assertClass(amount, BigNum);\r\n        var ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\r\n        return MoveInstantaneousReward.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} pot\r\n    * @param {MIRToStakeCredentials} amounts\r\n    * @returns {MoveInstantaneousReward}\r\n    */\r\n    static new_to_stake_creds(pot, amounts) {\r\n        _assertClass(amounts, MIRToStakeCredentials);\r\n        var ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\r\n        return MoveInstantaneousReward.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    pot() {\r\n        var ret = wasm.moveinstantaneousreward_pot(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.moveinstantaneousreward_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    as_to_other_pot() {\r\n        var ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MIRToStakeCredentials | undefined}\r\n    */\r\n    as_to_stake_creds() {\r\n        var ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\r\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MoveInstantaneousRewardsCert {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {MoveInstantaneousRewardsCert}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\r\n        return MoveInstantaneousRewardsCert.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MoveInstantaneousReward}\r\n    */\r\n    move_instantaneous_reward() {\r\n        var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\r\n        return MoveInstantaneousReward.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {MoveInstantaneousReward} move_instantaneous_reward\r\n    * @returns {MoveInstantaneousRewardsCert}\r\n    */\r\n    static new(move_instantaneous_reward) {\r\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\r\n        var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\r\n        return MoveInstantaneousRewardsCert.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MultiAsset {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MultiAsset.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_multiasset_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.multiasset_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {MultiAsset}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.multiasset_from_bytes(ptr0, len0);\r\n        return MultiAsset.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MultiAsset}\r\n    */\r\n    static new() {\r\n        var ret = wasm.multiasset_new();\r\n        return MultiAsset.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.multiasset_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {ScriptHash} key\r\n    * @param {Assets} value\r\n    * @returns {Assets | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, ScriptHash);\r\n        _assertClass(value, Assets);\r\n        var ret = wasm.multiasset_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : Assets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptHash} key\r\n    * @returns {Assets | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, ScriptHash);\r\n        var ret = wasm.multiasset_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : Assets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ScriptHashes}\r\n    */\r\n    keys() {\r\n        var ret = wasm.multiasset_keys(this.ptr);\r\n        return ScriptHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * removes an asset from the list if the result is 0 or less\r\n    * @param {MultiAsset} rhs_ma\r\n    * @returns {MultiAsset}\r\n    */\r\n    sub(rhs_ma) {\r\n        _assertClass(rhs_ma, MultiAsset);\r\n        var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\r\n        return MultiAsset.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class MultiHostName {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(MultiHostName.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_multihostname_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.multihostname_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {MultiHostName}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.multihostname_from_bytes(ptr0, len0);\r\n        return MultiHostName.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {DNSRecordSRV}\r\n    */\r\n    dns_name() {\r\n        var ret = wasm.multihostname_dns_name(this.ptr);\r\n        return DNSRecordSRV.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {DNSRecordSRV} dns_name\r\n    * @returns {MultiHostName}\r\n    */\r\n    static new(dns_name) {\r\n        _assertClass(dns_name, DNSRecordSRV);\r\n        var ret = wasm.multihostname_new(dns_name.ptr);\r\n        return MultiHostName.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class NativeScript {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(NativeScript.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_nativescript_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.nativescript_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {NativeScript}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.nativescript_from_bytes(ptr0, len0);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} namespace\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    hash(namespace) {\r\n        var ret = wasm.nativescript_hash(this.ptr, namespace);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptPubkey} script_pubkey\r\n    * @returns {NativeScript}\r\n    */\r\n    static new_script_pubkey(script_pubkey) {\r\n        _assertClass(script_pubkey, ScriptPubkey);\r\n        var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptAll} script_all\r\n    * @returns {NativeScript}\r\n    */\r\n    static new_script_all(script_all) {\r\n        _assertClass(script_all, ScriptAll);\r\n        var ret = wasm.nativescript_new_script_all(script_all.ptr);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptAny} script_any\r\n    * @returns {NativeScript}\r\n    */\r\n    static new_script_any(script_any) {\r\n        _assertClass(script_any, ScriptAny);\r\n        var ret = wasm.nativescript_new_script_any(script_any.ptr);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptNOfK} script_n_of_k\r\n    * @returns {NativeScript}\r\n    */\r\n    static new_script_n_of_k(script_n_of_k) {\r\n        _assertClass(script_n_of_k, ScriptNOfK);\r\n        var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TimelockStart} timelock_start\r\n    * @returns {NativeScript}\r\n    */\r\n    static new_timelock_start(timelock_start) {\r\n        _assertClass(timelock_start, TimelockStart);\r\n        var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TimelockExpiry} timelock_expiry\r\n    * @returns {NativeScript}\r\n    */\r\n    static new_timelock_expiry(timelock_expiry) {\r\n        _assertClass(timelock_expiry, TimelockExpiry);\r\n        var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.nativescript_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {ScriptPubkey | undefined}\r\n    */\r\n    as_script_pubkey() {\r\n        var ret = wasm.nativescript_as_script_pubkey(this.ptr);\r\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ScriptAll | undefined}\r\n    */\r\n    as_script_all() {\r\n        var ret = wasm.nativescript_as_script_all(this.ptr);\r\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ScriptAny | undefined}\r\n    */\r\n    as_script_any() {\r\n        var ret = wasm.nativescript_as_script_any(this.ptr);\r\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ScriptNOfK | undefined}\r\n    */\r\n    as_script_n_of_k() {\r\n        var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\r\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TimelockStart | undefined}\r\n    */\r\n    as_timelock_start() {\r\n        var ret = wasm.nativescript_as_timelock_start(this.ptr);\r\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TimelockExpiry | undefined}\r\n    */\r\n    as_timelock_expiry() {\r\n        var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\r\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class NativeScripts {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(NativeScripts.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_nativescripts_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {NativeScripts}\r\n    */\r\n    static new() {\r\n        var ret = wasm.nativescripts_new();\r\n        return NativeScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.nativescripts_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {NativeScript}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.nativescripts_get(this.ptr, index);\r\n        return NativeScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {NativeScript} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, NativeScript);\r\n        wasm.nativescripts_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class NetworkId {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(NetworkId.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_networkid_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.networkid_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {NetworkId}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.networkid_from_bytes(ptr0, len0);\r\n        return NetworkId.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {NetworkId}\r\n    */\r\n    static testnet() {\r\n        var ret = wasm.networkid_testnet();\r\n        return NetworkId.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {NetworkId}\r\n    */\r\n    static mainnet() {\r\n        var ret = wasm.networkid_mainnet();\r\n        return NetworkId.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.networkid_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class NetworkInfo {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(NetworkInfo.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_networkinfo_free(ptr);\r\n    }\r\n    /**\r\n    * @param {number} network_id\r\n    * @param {number} protocol_magic\r\n    * @returns {NetworkInfo}\r\n    */\r\n    static new(network_id, protocol_magic) {\r\n        var ret = wasm.networkinfo_new(network_id, protocol_magic);\r\n        return NetworkInfo.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    network_id() {\r\n        var ret = wasm.networkinfo_network_id(this.ptr);\r\n        return ret;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    protocol_magic() {\r\n        var ret = wasm.networkinfo_protocol_magic(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {NetworkInfo}\r\n    */\r\n    static testnet() {\r\n        var ret = wasm.networkinfo_testnet();\r\n        return NetworkInfo.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {NetworkInfo}\r\n    */\r\n    static mainnet() {\r\n        var ret = wasm.networkinfo_mainnet();\r\n        return NetworkInfo.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Nonce {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Nonce.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_nonce_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.nonce_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Nonce}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.nonce_from_bytes(ptr0, len0);\r\n        return Nonce.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Nonce}\r\n    */\r\n    static new_identity() {\r\n        var ret = wasm.nonce_new_identity();\r\n        return Nonce.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} hash\r\n    * @returns {Nonce}\r\n    */\r\n    static new_from_hash(hash) {\r\n        var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.nonce_new_from_hash(ptr0, len0);\r\n        return Nonce.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array | undefined}\r\n    */\r\n    get_hash() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.nonce_get_hash(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            let v0;\r\n            if (r0 !== 0) {\r\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n                wasm.__wbindgen_free(r0, r1 * 1);\r\n            }\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class OperationalCert {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(OperationalCert.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_operationalcert_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.operationalcert_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {OperationalCert}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.operationalcert_from_bytes(ptr0, len0);\r\n        return OperationalCert.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {KESVKey}\r\n    */\r\n    hot_vkey() {\r\n        var ret = wasm.operationalcert_hot_vkey(this.ptr);\r\n        return KESVKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    sequence_number() {\r\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kes_period() {\r\n        var ret = wasm.operationalcert_kes_period(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {Ed25519Signature}\r\n    */\r\n    sigma() {\r\n        var ret = wasm.operationalcert_sigma(this.ptr);\r\n        return Ed25519Signature.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {KESVKey} hot_vkey\r\n    * @param {number} sequence_number\r\n    * @param {number} kes_period\r\n    * @param {Ed25519Signature} sigma\r\n    * @returns {OperationalCert}\r\n    */\r\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\r\n        _assertClass(hot_vkey, KESVKey);\r\n        _assertClass(sigma, Ed25519Signature);\r\n        var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\r\n        return OperationalCert.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PlutusData {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PlutusData.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_plutusdata_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.plutusdata_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PlutusData}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.plutusdata_from_bytes(ptr0, len0);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ConstrPlutusData} constr_plutus_data\r\n    * @returns {PlutusData}\r\n    */\r\n    static new_constr_plutus_data(constr_plutus_data) {\r\n        _assertClass(constr_plutus_data, ConstrPlutusData);\r\n        var ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusMap} map\r\n    * @returns {PlutusData}\r\n    */\r\n    static new_map(map) {\r\n        _assertClass(map, PlutusMap);\r\n        var ret = wasm.plutusdata_new_map(map.ptr);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusList} list\r\n    * @returns {PlutusData}\r\n    */\r\n    static new_list(list) {\r\n        _assertClass(list, PlutusList);\r\n        var ret = wasm.plutusdata_new_list(list.ptr);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigInt} integer\r\n    * @returns {PlutusData}\r\n    */\r\n    static new_integer(integer) {\r\n        _assertClass(integer, BigInt);\r\n        var ret = wasm.plutusdata_new_integer(integer.ptr);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PlutusData}\r\n    */\r\n    static new_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.plutusdata_new_bytes(ptr0, len0);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.plutusdata_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {ConstrPlutusData | undefined}\r\n    */\r\n    as_constr_plutus_data() {\r\n        var ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\r\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusMap | undefined}\r\n    */\r\n    as_map() {\r\n        var ret = wasm.plutusdata_as_map(this.ptr);\r\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusList | undefined}\r\n    */\r\n    as_list() {\r\n        var ret = wasm.plutusdata_as_list(this.ptr);\r\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigInt | undefined}\r\n    */\r\n    as_integer() {\r\n        var ret = wasm.plutusdata_as_integer(this.ptr);\r\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array | undefined}\r\n    */\r\n    as_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.plutusdata_as_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            let v0;\r\n            if (r0 !== 0) {\r\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n                wasm.__wbindgen_free(r0, r1 * 1);\r\n            }\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PlutusList {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PlutusList.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_plutuslist_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.plutuslist_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PlutusList}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.plutuslist_from_bytes(ptr0, len0);\r\n        return PlutusList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusList}\r\n    */\r\n    static new() {\r\n        var ret = wasm.plutuslist_new();\r\n        return PlutusList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.plutuslist_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {PlutusData}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.plutuslist_get(this.ptr, index);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusData} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, PlutusData);\r\n        wasm.plutuslist_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PlutusMap {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PlutusMap.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_plutusmap_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.plutusmap_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PlutusMap}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.plutusmap_from_bytes(ptr0, len0);\r\n        return PlutusMap.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusMap}\r\n    */\r\n    static new() {\r\n        var ret = wasm.plutusmap_new();\r\n        return PlutusMap.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.plutusmap_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {PlutusData} key\r\n    * @param {PlutusData} value\r\n    * @returns {PlutusData | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, PlutusData);\r\n        _assertClass(value, PlutusData);\r\n        var ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusData} key\r\n    * @returns {PlutusData | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, PlutusData);\r\n        var ret = wasm.plutusmap_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusList}\r\n    */\r\n    keys() {\r\n        var ret = wasm.plutusmap_keys(this.ptr);\r\n        return PlutusList.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PlutusScript {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PlutusScript.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_plutusscript_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.plutusscript_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PlutusScript}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.plutusscript_from_bytes(ptr0, len0);\r\n        return PlutusScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PlutusScript}\r\n    */\r\n    static new(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.plutusscript_new(ptr0, len0);\r\n        return PlutusScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.plutusscript_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PlutusScripts {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PlutusScripts.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_plutusscripts_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.plutusscripts_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PlutusScripts}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.plutusscripts_from_bytes(ptr0, len0);\r\n        return PlutusScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusScripts}\r\n    */\r\n    static new() {\r\n        var ret = wasm.plutusscripts_new();\r\n        return PlutusScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.plutusscripts_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {PlutusScript}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.plutusscripts_get(this.ptr, index);\r\n        return PlutusScript.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusScript} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, PlutusScript);\r\n        wasm.plutusscripts_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Pointer {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Pointer.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_pointer_free(ptr);\r\n    }\r\n    /**\r\n    * @param {number} slot\r\n    * @param {number} tx_index\r\n    * @param {number} cert_index\r\n    * @returns {Pointer}\r\n    */\r\n    static new(slot, tx_index, cert_index) {\r\n        var ret = wasm.pointer_new(slot, tx_index, cert_index);\r\n        return Pointer.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    slot() {\r\n        var ret = wasm.pointer_slot(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    tx_index() {\r\n        var ret = wasm.pointer_tx_index(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    cert_index() {\r\n        var ret = wasm.pointer_cert_index(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PointerAddress {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PointerAddress.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_pointeraddress_free(ptr);\r\n    }\r\n    /**\r\n    * @param {number} network\r\n    * @param {StakeCredential} payment\r\n    * @param {Pointer} stake\r\n    * @returns {PointerAddress}\r\n    */\r\n    static new(network, payment, stake) {\r\n        _assertClass(payment, StakeCredential);\r\n        _assertClass(stake, Pointer);\r\n        var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\r\n        return PointerAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    payment_cred() {\r\n        var ret = wasm.pointeraddress_payment_cred(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Pointer}\r\n    */\r\n    stake_pointer() {\r\n        var ret = wasm.pointeraddress_stake_pointer(this.ptr);\r\n        return Pointer.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Address}\r\n    */\r\n    to_address() {\r\n        var ret = wasm.pointeraddress_to_address(this.ptr);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Address} addr\r\n    * @returns {PointerAddress | undefined}\r\n    */\r\n    static from_address(addr) {\r\n        _assertClass(addr, Address);\r\n        var ret = wasm.pointeraddress_from_address(addr.ptr);\r\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PoolMetadata {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PoolMetadata.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_poolmetadata_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.poolmetadata_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PoolMetadata}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\r\n        return PoolMetadata.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {URL}\r\n    */\r\n    url() {\r\n        var ret = wasm.poolmetadata_url(this.ptr);\r\n        return URL.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PoolMetadataHash}\r\n    */\r\n    pool_metadata_hash() {\r\n        var ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\r\n        return PoolMetadataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {URL} url\r\n    * @param {PoolMetadataHash} pool_metadata_hash\r\n    * @returns {PoolMetadata}\r\n    */\r\n    static new(url, pool_metadata_hash) {\r\n        _assertClass(url, URL);\r\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\r\n        var ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\r\n        return PoolMetadata.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PoolMetadataHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PoolMetadataHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_poolmetadatahash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.poolmetadatahash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {PoolMetadataHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.poolmetadatahash_from_bech32(ptr0, len0);\r\n        return PoolMetadataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PoolMetadataHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.poolmetadatahash_from_bytes(ptr0, len0);\r\n        return PoolMetadataHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PoolParams {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PoolParams.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_poolparams_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.poolparams_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PoolParams}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.poolparams_from_bytes(ptr0, len0);\r\n        return PoolParams.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    operator() {\r\n        var ret = wasm.poolparams_operator(this.ptr);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {VRFKeyHash}\r\n    */\r\n    vrf_keyhash() {\r\n        var ret = wasm.poolparams_vrf_keyhash(this.ptr);\r\n        return VRFKeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    pledge() {\r\n        var ret = wasm.poolparams_pledge(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    cost() {\r\n        var ret = wasm.poolparams_cost(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {UnitInterval}\r\n    */\r\n    margin() {\r\n        var ret = wasm.poolparams_margin(this.ptr);\r\n        return UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RewardAddress}\r\n    */\r\n    reward_account() {\r\n        var ret = wasm.poolparams_reward_account(this.ptr);\r\n        return RewardAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHashes}\r\n    */\r\n    pool_owners() {\r\n        var ret = wasm.poolparams_pool_owners(this.ptr);\r\n        return Ed25519KeyHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Relays}\r\n    */\r\n    relays() {\r\n        var ret = wasm.poolparams_relays(this.ptr);\r\n        return Relays.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PoolMetadata | undefined}\r\n    */\r\n    pool_metadata() {\r\n        var ret = wasm.poolparams_pool_metadata(this.ptr);\r\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHash} operator\r\n    * @param {VRFKeyHash} vrf_keyhash\r\n    * @param {BigNum} pledge\r\n    * @param {BigNum} cost\r\n    * @param {UnitInterval} margin\r\n    * @param {RewardAddress} reward_account\r\n    * @param {Ed25519KeyHashes} pool_owners\r\n    * @param {Relays} relays\r\n    * @param {PoolMetadata | undefined} pool_metadata\r\n    * @returns {PoolParams}\r\n    */\r\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\r\n        _assertClass(operator, Ed25519KeyHash);\r\n        _assertClass(vrf_keyhash, VRFKeyHash);\r\n        _assertClass(pledge, BigNum);\r\n        _assertClass(cost, BigNum);\r\n        _assertClass(margin, UnitInterval);\r\n        _assertClass(reward_account, RewardAddress);\r\n        _assertClass(pool_owners, Ed25519KeyHashes);\r\n        _assertClass(relays, Relays);\r\n        let ptr0 = 0;\r\n        if (!isLikeNone(pool_metadata)) {\r\n            _assertClass(pool_metadata, PoolMetadata);\r\n            ptr0 = pool_metadata.ptr;\r\n            pool_metadata.ptr = 0;\r\n        }\r\n        var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\r\n        return PoolParams.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PoolRegistration {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PoolRegistration.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_poolregistration_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.poolregistration_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PoolRegistration}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.poolregistration_from_bytes(ptr0, len0);\r\n        return PoolRegistration.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PoolParams}\r\n    */\r\n    pool_params() {\r\n        var ret = wasm.poolregistration_pool_params(this.ptr);\r\n        return PoolParams.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PoolParams} pool_params\r\n    * @returns {PoolRegistration}\r\n    */\r\n    static new(pool_params) {\r\n        _assertClass(pool_params, PoolParams);\r\n        var ret = wasm.poolregistration_new(pool_params.ptr);\r\n        return PoolRegistration.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PoolRetirement {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PoolRetirement.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_poolretirement_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.poolretirement_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PoolRetirement}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.poolretirement_from_bytes(ptr0, len0);\r\n        return PoolRetirement.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    pool_keyhash() {\r\n        var ret = wasm.poolretirement_pool_keyhash(this.ptr);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    epoch() {\r\n        var ret = wasm.poolretirement_epoch(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHash} pool_keyhash\r\n    * @param {number} epoch\r\n    * @returns {PoolRetirement}\r\n    */\r\n    static new(pool_keyhash, epoch) {\r\n        _assertClass(pool_keyhash, Ed25519KeyHash);\r\n        var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\r\n        return PoolRetirement.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PrivateKey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PrivateKey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_privatekey_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {PublicKey}\r\n    */\r\n    to_public() {\r\n        var ret = wasm.privatekey_to_public(this.ptr);\r\n        return PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PrivateKey}\r\n    */\r\n    static generate_ed25519() {\r\n        var ret = wasm.privatekey_generate_ed25519();\r\n        return PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PrivateKey}\r\n    */\r\n    static generate_ed25519extended() {\r\n        var ret = wasm.privatekey_generate_ed25519extended();\r\n        return PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_bech32() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.privatekey_to_bech32(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    as_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.privatekey_as_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PrivateKey}\r\n    */\r\n    static from_extended_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\r\n        return PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PrivateKey}\r\n    */\r\n    static from_normal_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\r\n        return PrivateKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} message\r\n    * @returns {Ed25519Signature}\r\n    */\r\n    sign(message) {\r\n        var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\r\n        return Ed25519Signature.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ProposedProtocolParameterUpdates {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ProposedProtocolParameterUpdates}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\r\n        return ProposedProtocolParameterUpdates.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ProposedProtocolParameterUpdates}\r\n    */\r\n    static new() {\r\n        var ret = wasm.proposedprotocolparameterupdates_new();\r\n        return ProposedProtocolParameterUpdates.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.proposedprotocolparameterupdates_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {GenesisHash} key\r\n    * @param {ProtocolParamUpdate} value\r\n    * @returns {ProtocolParamUpdate | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, GenesisHash);\r\n        _assertClass(value, ProtocolParamUpdate);\r\n        var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {GenesisHash} key\r\n    * @returns {ProtocolParamUpdate | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, GenesisHash);\r\n        var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {GenesisHashes}\r\n    */\r\n    keys() {\r\n        var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\r\n        return GenesisHashes.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ProtocolParamUpdate {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ProtocolParamUpdate.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_protocolparamupdate_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ProtocolParamUpdate}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\r\n        return ProtocolParamUpdate.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} minfee_a\r\n    */\r\n    set_minfee_a(minfee_a) {\r\n        _assertClass(minfee_a, BigNum);\r\n        wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    minfee_a() {\r\n        var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} minfee_b\r\n    */\r\n    set_minfee_b(minfee_b) {\r\n        _assertClass(minfee_b, BigNum);\r\n        wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    minfee_b() {\r\n        var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} max_block_body_size\r\n    */\r\n    set_max_block_body_size(max_block_body_size) {\r\n        wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    max_block_body_size() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {number} max_tx_size\r\n    */\r\n    set_max_tx_size(max_tx_size) {\r\n        wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    max_tx_size() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {number} max_block_header_size\r\n    */\r\n    set_max_block_header_size(max_block_header_size) {\r\n        wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    max_block_header_size() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {BigNum} key_deposit\r\n    */\r\n    set_key_deposit(key_deposit) {\r\n        _assertClass(key_deposit, BigNum);\r\n        wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    key_deposit() {\r\n        var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} pool_deposit\r\n    */\r\n    set_pool_deposit(pool_deposit) {\r\n        _assertClass(pool_deposit, BigNum);\r\n        wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    pool_deposit() {\r\n        var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} max_epoch\r\n    */\r\n    set_max_epoch(max_epoch) {\r\n        wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    max_epoch() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {number} n_opt\r\n    */\r\n    set_n_opt(n_opt) {\r\n        wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    n_opt() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolparamupdate_n_opt(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {UnitInterval} pool_pledge_influence\r\n    */\r\n    set_pool_pledge_influence(pool_pledge_influence) {\r\n        _assertClass(pool_pledge_influence, UnitInterval);\r\n        wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\r\n    }\r\n    /**\r\n    * @returns {UnitInterval | undefined}\r\n    */\r\n    pool_pledge_influence() {\r\n        var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\r\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {UnitInterval} expansion_rate\r\n    */\r\n    set_expansion_rate(expansion_rate) {\r\n        _assertClass(expansion_rate, UnitInterval);\r\n        wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\r\n    }\r\n    /**\r\n    * @returns {UnitInterval | undefined}\r\n    */\r\n    expansion_rate() {\r\n        var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\r\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {UnitInterval} treasury_growth_rate\r\n    */\r\n    set_treasury_growth_rate(treasury_growth_rate) {\r\n        _assertClass(treasury_growth_rate, UnitInterval);\r\n        wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\r\n    }\r\n    /**\r\n    * @returns {UnitInterval | undefined}\r\n    */\r\n    treasury_growth_rate() {\r\n        var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\r\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {UnitInterval} d\r\n    */\r\n    set_d(d) {\r\n        _assertClass(d, UnitInterval);\r\n        wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\r\n    }\r\n    /**\r\n    * @returns {UnitInterval | undefined}\r\n    */\r\n    d() {\r\n        var ret = wasm.protocolparamupdate_d(this.ptr);\r\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Nonce} extra_entropy\r\n    */\r\n    set_extra_entropy(extra_entropy) {\r\n        _assertClass(extra_entropy, Nonce);\r\n        wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\r\n    }\r\n    /**\r\n    * @returns {Nonce | undefined}\r\n    */\r\n    extra_entropy() {\r\n        var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\r\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ProtocolVersions} protocol_version\r\n    */\r\n    set_protocol_version(protocol_version) {\r\n        _assertClass(protocol_version, ProtocolVersions);\r\n        wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\r\n    }\r\n    /**\r\n    * @returns {ProtocolVersions | undefined}\r\n    */\r\n    protocol_version() {\r\n        var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\r\n        return ret === 0 ? undefined : ProtocolVersions.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} min_pool_cost\r\n    */\r\n    set_min_pool_cost(min_pool_cost) {\r\n        _assertClass(min_pool_cost, BigNum);\r\n        wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    min_pool_cost() {\r\n        var ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} ada_per_utxo_byte\r\n    */\r\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\r\n        _assertClass(ada_per_utxo_byte, BigNum);\r\n        wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    ada_per_utxo_byte() {\r\n        var ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Costmdls} cost_models\r\n    */\r\n    set_cost_models(cost_models) {\r\n        _assertClass(cost_models, Costmdls);\r\n        wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\r\n    }\r\n    /**\r\n    * @returns {Costmdls | undefined}\r\n    */\r\n    cost_models() {\r\n        var ret = wasm.protocolparamupdate_cost_models(this.ptr);\r\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ExUnitPrices} execution_costs\r\n    */\r\n    set_execution_costs(execution_costs) {\r\n        _assertClass(execution_costs, ExUnitPrices);\r\n        wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\r\n    }\r\n    /**\r\n    * @returns {ExUnitPrices | undefined}\r\n    */\r\n    execution_costs() {\r\n        var ret = wasm.protocolparamupdate_execution_costs(this.ptr);\r\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ExUnits} max_tx_ex_units\r\n    */\r\n    set_max_tx_ex_units(max_tx_ex_units) {\r\n        _assertClass(max_tx_ex_units, ExUnits);\r\n        wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\r\n    }\r\n    /**\r\n    * @returns {ExUnits | undefined}\r\n    */\r\n    max_tx_ex_units() {\r\n        var ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\r\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ExUnits} max_block_ex_units\r\n    */\r\n    set_max_block_ex_units(max_block_ex_units) {\r\n        _assertClass(max_block_ex_units, ExUnits);\r\n        wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\r\n    }\r\n    /**\r\n    * @returns {ExUnits | undefined}\r\n    */\r\n    max_block_ex_units() {\r\n        var ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\r\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} max_value_size\r\n    */\r\n    set_max_value_size(max_value_size) {\r\n        wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    max_value_size() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {ProtocolParamUpdate}\r\n    */\r\n    static new() {\r\n        var ret = wasm.protocolparamupdate_new();\r\n        return ProtocolParamUpdate.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ProtocolVersion {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ProtocolVersion.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_protocolversion_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolversion_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ProtocolVersion}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.protocolversion_from_bytes(ptr0, len0);\r\n        return ProtocolVersion.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    major() {\r\n        var ret = wasm.protocolversion_major(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    minor() {\r\n        var ret = wasm.protocolversion_minor(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} major\r\n    * @param {number} minor\r\n    * @returns {ProtocolVersion}\r\n    */\r\n    static new(major, minor) {\r\n        var ret = wasm.protocolversion_new(major, minor);\r\n        return ProtocolVersion.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ProtocolVersions {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ProtocolVersions.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_protocolversions_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.protocolversions_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ProtocolVersions}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.protocolversions_from_bytes(ptr0, len0);\r\n        return ProtocolVersions.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ProtocolVersions}\r\n    */\r\n    static new() {\r\n        var ret = wasm.protocolversions_new();\r\n        return ProtocolVersions.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.protocolversions_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {ProtocolVersion}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.protocolversions_get(this.ptr, index);\r\n        return ProtocolVersion.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ProtocolVersion} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, ProtocolVersion);\r\n        wasm.protocolversions_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n* ED25519 key used as public key\r\n*/\r\nexport class PublicKey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PublicKey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_publickey_free(ptr);\r\n    }\r\n    /**\r\n    * Get public key from its bech32 representation\r\n    * Example:\r\n    * ```javascript\r\n    * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\r\n    * ```\r\n    * @param {string} bech32_str\r\n    * @returns {PublicKey}\r\n    */\r\n    static from_bech32(bech32_str) {\r\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.publickey_from_bech32(ptr0, len0);\r\n        return PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    to_bech32() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.publickey_to_bech32(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    as_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.publickey_as_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {PublicKey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.publickey_from_bytes(ptr0, len0);\r\n        return PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} data\r\n    * @param {Ed25519Signature} signature\r\n    * @returns {boolean}\r\n    */\r\n    verify(data, signature) {\r\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        _assertClass(signature, Ed25519Signature);\r\n        var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\r\n        return ret !== 0;\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    hash() {\r\n        var ret = wasm.publickey_hash(this.ptr);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class PublicKeys {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(PublicKeys.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_publickeys_free(ptr);\r\n    }\r\n    /**\r\n    */\r\n    constructor() {\r\n        var ret = wasm.publickeys_new();\r\n        return PublicKeys.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    size() {\r\n        var ret = wasm.publickeys_size(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {PublicKey}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.publickeys_get(this.ptr, index);\r\n        return PublicKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PublicKey} key\r\n    */\r\n    add(key) {\r\n        _assertClass(key, PublicKey);\r\n        wasm.publickeys_add(this.ptr, key.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Redeemer {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Redeemer.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_redeemer_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.redeemer_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Redeemer}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.redeemer_from_bytes(ptr0, len0);\r\n        return Redeemer.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RedeemerTag}\r\n    */\r\n    tag() {\r\n        var ret = wasm.redeemer_tag(this.ptr);\r\n        return RedeemerTag.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    index() {\r\n        var ret = wasm.redeemer_index(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PlutusData}\r\n    */\r\n    data() {\r\n        var ret = wasm.redeemer_data(this.ptr);\r\n        return PlutusData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ExUnits}\r\n    */\r\n    ex_units() {\r\n        var ret = wasm.redeemer_ex_units(this.ptr);\r\n        return ExUnits.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {RedeemerTag} tag\r\n    * @param {BigNum} index\r\n    * @param {PlutusData} data\r\n    * @param {ExUnits} ex_units\r\n    * @returns {Redeemer}\r\n    */\r\n    static new(tag, index, data, ex_units) {\r\n        _assertClass(tag, RedeemerTag);\r\n        _assertClass(index, BigNum);\r\n        _assertClass(data, PlutusData);\r\n        _assertClass(ex_units, ExUnits);\r\n        var ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\r\n        return Redeemer.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class RedeemerTag {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(RedeemerTag.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_redeemertag_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.redeemertag_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {RedeemerTag}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.redeemertag_from_bytes(ptr0, len0);\r\n        return RedeemerTag.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RedeemerTag}\r\n    */\r\n    static new_spend() {\r\n        var ret = wasm.redeemertag_new_spend();\r\n        return RedeemerTag.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RedeemerTag}\r\n    */\r\n    static new_mint() {\r\n        var ret = wasm.redeemertag_new_mint();\r\n        return RedeemerTag.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RedeemerTag}\r\n    */\r\n    static new_cert() {\r\n        var ret = wasm.redeemertag_new_cert();\r\n        return RedeemerTag.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RedeemerTag}\r\n    */\r\n    static new_reward() {\r\n        var ret = wasm.redeemertag_new_reward();\r\n        return RedeemerTag.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.redeemertag_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Redeemers {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Redeemers.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_redeemers_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.redeemers_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Redeemers}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.redeemers_from_bytes(ptr0, len0);\r\n        return Redeemers.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Redeemers}\r\n    */\r\n    static new() {\r\n        var ret = wasm.redeemers_new();\r\n        return Redeemers.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.redeemers_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {Redeemer}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.redeemers_get(this.ptr, index);\r\n        return Redeemer.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Redeemer} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, Redeemer);\r\n        wasm.redeemers_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Relay {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Relay.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_relay_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.relay_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Relay}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.relay_from_bytes(ptr0, len0);\r\n        return Relay.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {SingleHostAddr} single_host_addr\r\n    * @returns {Relay}\r\n    */\r\n    static new_single_host_addr(single_host_addr) {\r\n        _assertClass(single_host_addr, SingleHostAddr);\r\n        var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\r\n        return Relay.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {SingleHostName} single_host_name\r\n    * @returns {Relay}\r\n    */\r\n    static new_single_host_name(single_host_name) {\r\n        _assertClass(single_host_name, SingleHostName);\r\n        var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\r\n        return Relay.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {MultiHostName} multi_host_name\r\n    * @returns {Relay}\r\n    */\r\n    static new_multi_host_name(multi_host_name) {\r\n        _assertClass(multi_host_name, MultiHostName);\r\n        var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\r\n        return Relay.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.relay_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {SingleHostAddr | undefined}\r\n    */\r\n    as_single_host_addr() {\r\n        var ret = wasm.relay_as_single_host_addr(this.ptr);\r\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {SingleHostName | undefined}\r\n    */\r\n    as_single_host_name() {\r\n        var ret = wasm.relay_as_single_host_name(this.ptr);\r\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MultiHostName | undefined}\r\n    */\r\n    as_multi_host_name() {\r\n        var ret = wasm.relay_as_multi_host_name(this.ptr);\r\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Relays {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Relays.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_relays_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.relays_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Relays}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.relays_from_bytes(ptr0, len0);\r\n        return Relays.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Relays}\r\n    */\r\n    static new() {\r\n        var ret = wasm.relays_new();\r\n        return Relays.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.relays_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {Relay}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.relays_get(this.ptr, index);\r\n        return Relay.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Relay} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, Relay);\r\n        wasm.relays_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class RewardAddress {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(RewardAddress.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_rewardaddress_free(ptr);\r\n    }\r\n    /**\r\n    * @param {number} network\r\n    * @param {StakeCredential} payment\r\n    * @returns {RewardAddress}\r\n    */\r\n    static new(network, payment) {\r\n        _assertClass(payment, StakeCredential);\r\n        var ret = wasm.rewardaddress_new(network, payment.ptr);\r\n        return RewardAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    payment_cred() {\r\n        var ret = wasm.rewardaddress_payment_cred(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Address}\r\n    */\r\n    to_address() {\r\n        var ret = wasm.rewardaddress_to_address(this.ptr);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Address} addr\r\n    * @returns {RewardAddress | undefined}\r\n    */\r\n    static from_address(addr) {\r\n        _assertClass(addr, Address);\r\n        var ret = wasm.rewardaddress_from_address(addr.ptr);\r\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class RewardAddresses {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(RewardAddresses.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_rewardaddresses_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.rewardaddresses_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {RewardAddresses}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\r\n        return RewardAddresses.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RewardAddresses}\r\n    */\r\n    static new() {\r\n        var ret = wasm.rewardaddresses_new();\r\n        return RewardAddresses.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.rewardaddresses_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {RewardAddress}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.rewardaddresses_get(this.ptr, index);\r\n        return RewardAddress.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {RewardAddress} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, RewardAddress);\r\n        wasm.rewardaddresses_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ScriptAll {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ScriptAll.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_scriptall_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.scriptall_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ScriptAll}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scriptall_from_bytes(ptr0, len0);\r\n        return ScriptAll.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {NativeScripts}\r\n    */\r\n    native_scripts() {\r\n        var ret = wasm.scriptall_native_scripts(this.ptr);\r\n        return NativeScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {NativeScripts} native_scripts\r\n    * @returns {ScriptAll}\r\n    */\r\n    static new(native_scripts) {\r\n        _assertClass(native_scripts, NativeScripts);\r\n        var ret = wasm.scriptall_new(native_scripts.ptr);\r\n        return ScriptAll.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ScriptAny {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ScriptAny.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_scriptany_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.scriptany_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ScriptAny}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scriptany_from_bytes(ptr0, len0);\r\n        return ScriptAny.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {NativeScripts}\r\n    */\r\n    native_scripts() {\r\n        var ret = wasm.scriptany_native_scripts(this.ptr);\r\n        return NativeScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {NativeScripts} native_scripts\r\n    * @returns {ScriptAny}\r\n    */\r\n    static new(native_scripts) {\r\n        _assertClass(native_scripts, NativeScripts);\r\n        var ret = wasm.scriptany_new(native_scripts.ptr);\r\n        return ScriptAny.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ScriptDataHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ScriptDataHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_scriptdatahash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.scriptdatahash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {ScriptDataHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scriptdatahash_from_bech32(ptr0, len0);\r\n        return ScriptDataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ScriptDataHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scriptdatahash_from_bytes(ptr0, len0);\r\n        return ScriptDataHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ScriptHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ScriptHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_scripthash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.scripthash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.scripthash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {ScriptHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scripthash_from_bech32(ptr0, len0);\r\n        return ScriptHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ScriptHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scripthash_from_bytes(ptr0, len0);\r\n        return ScriptHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ScriptHashes {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ScriptHashes.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_scripthashes_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.scripthashes_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ScriptHashes}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scripthashes_from_bytes(ptr0, len0);\r\n        return ScriptHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ScriptHashes}\r\n    */\r\n    static new() {\r\n        var ret = wasm.scripthashes_new();\r\n        return ScriptHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.scripthashes_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {ScriptHash}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.scripthashes_get(this.ptr, index);\r\n        return ScriptHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptHash} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, ScriptHash);\r\n        wasm.scripthashes_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ScriptNOfK {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ScriptNOfK.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_scriptnofk_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.scriptnofk_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ScriptNOfK}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\r\n        return ScriptNOfK.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    n() {\r\n        var ret = wasm.scriptnofk_n(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {NativeScripts}\r\n    */\r\n    native_scripts() {\r\n        var ret = wasm.scriptnofk_native_scripts(this.ptr);\r\n        return NativeScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} n\r\n    * @param {NativeScripts} native_scripts\r\n    * @returns {ScriptNOfK}\r\n    */\r\n    static new(n, native_scripts) {\r\n        _assertClass(native_scripts, NativeScripts);\r\n        var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\r\n        return ScriptNOfK.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class ScriptPubkey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(ScriptPubkey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_scriptpubkey_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.scriptpubkey_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {ScriptPubkey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\r\n        return ScriptPubkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    addr_keyhash() {\r\n        var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHash} addr_keyhash\r\n    * @returns {ScriptPubkey}\r\n    */\r\n    static new(addr_keyhash) {\r\n        _assertClass(addr_keyhash, Ed25519KeyHash);\r\n        var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\r\n        return ScriptPubkey.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class SingleHostAddr {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(SingleHostAddr.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_singlehostaddr_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.singlehostaddr_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {SingleHostAddr}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\r\n        return SingleHostAddr.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    port() {\r\n        var ret = wasm.singlehostaddr_port(this.ptr);\r\n        return ret === 0xFFFFFF ? undefined : ret;\r\n    }\r\n    /**\r\n    * @returns {Ipv4 | undefined}\r\n    */\r\n    ipv4() {\r\n        var ret = wasm.singlehostaddr_ipv4(this.ptr);\r\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ipv6 | undefined}\r\n    */\r\n    ipv6() {\r\n        var ret = wasm.singlehostaddr_ipv6(this.ptr);\r\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number | undefined} port\r\n    * @param {Ipv4 | undefined} ipv4\r\n    * @param {Ipv6 | undefined} ipv6\r\n    * @returns {SingleHostAddr}\r\n    */\r\n    static new(port, ipv4, ipv6) {\r\n        let ptr0 = 0;\r\n        if (!isLikeNone(ipv4)) {\r\n            _assertClass(ipv4, Ipv4);\r\n            ptr0 = ipv4.ptr;\r\n            ipv4.ptr = 0;\r\n        }\r\n        let ptr1 = 0;\r\n        if (!isLikeNone(ipv6)) {\r\n            _assertClass(ipv6, Ipv6);\r\n            ptr1 = ipv6.ptr;\r\n            ipv6.ptr = 0;\r\n        }\r\n        var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\r\n        return SingleHostAddr.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class SingleHostName {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(SingleHostName.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_singlehostname_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.singlehostname_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {SingleHostName}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.singlehostname_from_bytes(ptr0, len0);\r\n        return SingleHostName.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    port() {\r\n        var ret = wasm.singlehostname_port(this.ptr);\r\n        return ret === 0xFFFFFF ? undefined : ret;\r\n    }\r\n    /**\r\n    * @returns {DNSRecordAorAAAA}\r\n    */\r\n    dns_name() {\r\n        var ret = wasm.singlehostname_dns_name(this.ptr);\r\n        return DNSRecordAorAAAA.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number | undefined} port\r\n    * @param {DNSRecordAorAAAA} dns_name\r\n    * @returns {SingleHostName}\r\n    */\r\n    static new(port, dns_name) {\r\n        _assertClass(dns_name, DNSRecordAorAAAA);\r\n        var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\r\n        return SingleHostName.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class StakeCredential {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(StakeCredential.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_stakecredential_free(ptr);\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHash} hash\r\n    * @returns {StakeCredential}\r\n    */\r\n    static from_keyhash(hash) {\r\n        _assertClass(hash, Ed25519KeyHash);\r\n        var ret = wasm.stakecredential_from_keyhash(hash.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptHash} hash\r\n    * @returns {StakeCredential}\r\n    */\r\n    static from_scripthash(hash) {\r\n        _assertClass(hash, ScriptHash);\r\n        var ret = wasm.stakecredential_from_scripthash(hash.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHash | undefined}\r\n    */\r\n    to_keyhash() {\r\n        var ret = wasm.stakecredential_to_keyhash(this.ptr);\r\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ScriptHash | undefined}\r\n    */\r\n    to_scripthash() {\r\n        var ret = wasm.stakecredential_to_scripthash(this.ptr);\r\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.stakecredential_kind(this.ptr);\r\n        return ret;\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.stakecredential_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {StakeCredential}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.stakecredential_from_bytes(ptr0, len0);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class StakeCredentials {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(StakeCredentials.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_stakecredentials_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.stakecredentials_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {StakeCredentials}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\r\n        return StakeCredentials.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredentials}\r\n    */\r\n    static new() {\r\n        var ret = wasm.stakecredentials_new();\r\n        return StakeCredentials.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.stakecredentials_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {StakeCredential}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.stakecredentials_get(this.ptr, index);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeCredential} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, StakeCredential);\r\n        wasm.stakecredentials_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class StakeDelegation {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(StakeDelegation.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_stakedelegation_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.stakedelegation_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {StakeDelegation}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\r\n        return StakeDelegation.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    stake_credential() {\r\n        var ret = wasm.stakedelegation_stake_credential(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHash}\r\n    */\r\n    pool_keyhash() {\r\n        var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\r\n        return Ed25519KeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeCredential} stake_credential\r\n    * @param {Ed25519KeyHash} pool_keyhash\r\n    * @returns {StakeDelegation}\r\n    */\r\n    static new(stake_credential, pool_keyhash) {\r\n        _assertClass(stake_credential, StakeCredential);\r\n        _assertClass(pool_keyhash, Ed25519KeyHash);\r\n        var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\r\n        return StakeDelegation.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class StakeDeregistration {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(StakeDeregistration.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_stakederegistration_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.stakederegistration_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {StakeDeregistration}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\r\n        return StakeDeregistration.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    stake_credential() {\r\n        var ret = wasm.stakederegistration_stake_credential(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeCredential} stake_credential\r\n    * @returns {StakeDeregistration}\r\n    */\r\n    static new(stake_credential) {\r\n        _assertClass(stake_credential, StakeCredential);\r\n        var ret = wasm.stakederegistration_new(stake_credential.ptr);\r\n        return StakeDeregistration.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class StakeRegistration {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(StakeRegistration.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_stakeregistration_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.stakeregistration_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {StakeRegistration}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\r\n        return StakeRegistration.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {StakeCredential}\r\n    */\r\n    stake_credential() {\r\n        var ret = wasm.stakeregistration_stake_credential(this.ptr);\r\n        return StakeCredential.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {StakeCredential} stake_credential\r\n    * @returns {StakeRegistration}\r\n    */\r\n    static new(stake_credential) {\r\n        _assertClass(stake_credential, StakeCredential);\r\n        var ret = wasm.stakeregistration_new(stake_credential.ptr);\r\n        return StakeRegistration.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Strings {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Strings.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_strings_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Strings}\r\n    */\r\n    static new() {\r\n        var ret = wasm.strings_new();\r\n        return Strings.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.strings_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {string}\r\n    */\r\n    get(index) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.strings_get(retptr, this.ptr, index);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} elem\r\n    */\r\n    add(elem) {\r\n        var ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        wasm.strings_add(this.ptr, ptr0, len0);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TimelockExpiry {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TimelockExpiry.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_timelockexpiry_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.timelockexpiry_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TimelockExpiry}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\r\n        return TimelockExpiry.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    slot() {\r\n        var ret = wasm.timelockexpiry_slot(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} slot\r\n    * @returns {TimelockExpiry}\r\n    */\r\n    static new(slot) {\r\n        var ret = wasm.timelockexpiry_new(slot);\r\n        return TimelockExpiry.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TimelockStart {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TimelockStart.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_timelockstart_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.timelockstart_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TimelockStart}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.timelockstart_from_bytes(ptr0, len0);\r\n        return TimelockStart.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    slot() {\r\n        var ret = wasm.timelockstart_slot(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} slot\r\n    * @returns {TimelockStart}\r\n    */\r\n    static new(slot) {\r\n        var ret = wasm.timelockstart_new(slot);\r\n        return TimelockStart.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Transaction {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Transaction.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transaction_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transaction_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Transaction}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transaction_from_bytes(ptr0, len0);\r\n        return Transaction.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionBody}\r\n    */\r\n    body() {\r\n        var ret = wasm.transaction_body(this.ptr);\r\n        return TransactionBody.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionWitnessSet}\r\n    */\r\n    witness_set() {\r\n        var ret = wasm.transaction_witness_set(this.ptr);\r\n        return TransactionWitnessSet.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {boolean}\r\n    */\r\n    is_valid() {\r\n        var ret = wasm.transaction_is_valid(this.ptr);\r\n        return ret !== 0;\r\n    }\r\n    /**\r\n    * @param {boolean} valid\r\n    */\r\n    set_is_valid(valid) {\r\n        wasm.transaction_set_is_valid(this.ptr, valid);\r\n    }\r\n    /**\r\n    * @returns {AuxiliaryData | undefined}\r\n    */\r\n    auxiliary_data() {\r\n        var ret = wasm.transaction_auxiliary_data(this.ptr);\r\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionBody} body\r\n    * @param {TransactionWitnessSet} witness_set\r\n    * @param {AuxiliaryData | undefined} auxiliary_data\r\n    * @returns {Transaction}\r\n    */\r\n    static new(body, witness_set, auxiliary_data) {\r\n        _assertClass(body, TransactionBody);\r\n        _assertClass(witness_set, TransactionWitnessSet);\r\n        let ptr0 = 0;\r\n        if (!isLikeNone(auxiliary_data)) {\r\n            _assertClass(auxiliary_data, AuxiliaryData);\r\n            ptr0 = auxiliary_data.ptr;\r\n            auxiliary_data.ptr = 0;\r\n        }\r\n        var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\r\n        return Transaction.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionBodies {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionBodies.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionbodies_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionbodies_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionBodies}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\r\n        return TransactionBodies.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionBodies}\r\n    */\r\n    static new() {\r\n        var ret = wasm.transactionbodies_new();\r\n        return TransactionBodies.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.transactionbodies_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {TransactionBody}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.transactionbodies_get(this.ptr, index);\r\n        return TransactionBody.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionBody} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, TransactionBody);\r\n        wasm.transactionbodies_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionBody {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionBody.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionbody_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionbody_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionBody}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionbody_from_bytes(ptr0, len0);\r\n        return TransactionBody.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionInputs}\r\n    */\r\n    inputs() {\r\n        var ret = wasm.transactionbody_inputs(this.ptr);\r\n        return TransactionInputs.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionOutputs}\r\n    */\r\n    outputs() {\r\n        var ret = wasm.transactionbody_outputs(this.ptr);\r\n        return TransactionOutputs.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    fee() {\r\n        var ret = wasm.transactionbody_fee(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    ttl() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionbody_ttl(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Certificates} certs\r\n    */\r\n    set_certs(certs) {\r\n        _assertClass(certs, Certificates);\r\n        wasm.transactionbody_set_certs(this.ptr, certs.ptr);\r\n    }\r\n    /**\r\n    * @returns {Certificates | undefined}\r\n    */\r\n    certs() {\r\n        var ret = wasm.transactionbody_certs(this.ptr);\r\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Withdrawals} withdrawals\r\n    */\r\n    set_withdrawals(withdrawals) {\r\n        _assertClass(withdrawals, Withdrawals);\r\n        wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\r\n    }\r\n    /**\r\n    * @returns {Withdrawals | undefined}\r\n    */\r\n    withdrawals() {\r\n        var ret = wasm.transactionbody_withdrawals(this.ptr);\r\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Update} update\r\n    */\r\n    set_update(update) {\r\n        _assertClass(update, Update);\r\n        wasm.transactionbody_set_update(this.ptr, update.ptr);\r\n    }\r\n    /**\r\n    * @returns {Update | undefined}\r\n    */\r\n    update() {\r\n        var ret = wasm.transactionbody_update(this.ptr);\r\n        return ret === 0 ? undefined : Update.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {AuxiliaryDataHash} auxiliary_data_hash\r\n    */\r\n    set_auxiliary_data_hash(auxiliary_data_hash) {\r\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\r\n        wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\r\n    }\r\n    /**\r\n    * @returns {AuxiliaryDataHash | undefined}\r\n    */\r\n    auxiliary_data_hash() {\r\n        var ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\r\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {number} validity_start_interval\r\n    */\r\n    set_validity_start_interval(validity_start_interval) {\r\n        wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);\r\n    }\r\n    /**\r\n    * @returns {number | undefined}\r\n    */\r\n    validity_start_interval() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionbody_validity_start_interval(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return r0 === 0 ? undefined : r1 >>> 0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Mint} mint\r\n    */\r\n    set_mint(mint) {\r\n        _assertClass(mint, Mint);\r\n        wasm.transactionbody_set_mint(this.ptr, mint.ptr);\r\n    }\r\n    /**\r\n    * @returns {Mint | undefined}\r\n    */\r\n    multiassets() {\r\n        var ret = wasm.transactionbody_multiassets(this.ptr);\r\n        return ret === 0 ? undefined : Mint.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {ScriptDataHash} script_data_hash\r\n    */\r\n    set_script_data_hash(script_data_hash) {\r\n        _assertClass(script_data_hash, ScriptDataHash);\r\n        wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\r\n    }\r\n    /**\r\n    * @returns {ScriptDataHash | undefined}\r\n    */\r\n    script_data_hash() {\r\n        var ret = wasm.transactionbody_script_data_hash(this.ptr);\r\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionInputs} collateral\r\n    */\r\n    set_collateral(collateral) {\r\n        _assertClass(collateral, TransactionInputs);\r\n        wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\r\n    }\r\n    /**\r\n    * @returns {TransactionInputs | undefined}\r\n    */\r\n    collateral() {\r\n        var ret = wasm.transactionbody_collateral(this.ptr);\r\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHashes} required_signers\r\n    */\r\n    set_required_signers(required_signers) {\r\n        _assertClass(required_signers, Ed25519KeyHashes);\r\n        wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\r\n    }\r\n    /**\r\n    * @returns {Ed25519KeyHashes | undefined}\r\n    */\r\n    required_signers() {\r\n        var ret = wasm.transactionbody_required_signers(this.ptr);\r\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {NetworkId} network_id\r\n    */\r\n    set_network_id(network_id) {\r\n        _assertClass(network_id, NetworkId);\r\n        wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\r\n    }\r\n    /**\r\n    * @returns {NetworkId | undefined}\r\n    */\r\n    network_id() {\r\n        var ret = wasm.transactionbody_network_id(this.ptr);\r\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionInputs} inputs\r\n    * @param {TransactionOutputs} outputs\r\n    * @param {BigNum} fee\r\n    * @param {number | undefined} ttl\r\n    * @returns {TransactionBody}\r\n    */\r\n    static new(inputs, outputs, fee, ttl) {\r\n        _assertClass(inputs, TransactionInputs);\r\n        _assertClass(outputs, TransactionOutputs);\r\n        _assertClass(fee, BigNum);\r\n        var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);\r\n        return TransactionBody.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionBuilder {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionBuilder.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionbuilder_free(ptr);\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHash} hash\r\n    * @param {TransactionInput} input\r\n    * @param {Value} amount\r\n    */\r\n    add_key_input(hash, input, amount) {\r\n        _assertClass(hash, Ed25519KeyHash);\r\n        _assertClass(input, TransactionInput);\r\n        _assertClass(amount, Value);\r\n        wasm.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\r\n    }\r\n    /**\r\n    * @param {ScriptHash} hash\r\n    * @param {TransactionInput} input\r\n    * @param {Value} amount\r\n    */\r\n    add_script_input(hash, input, amount) {\r\n        _assertClass(hash, ScriptHash);\r\n        _assertClass(input, TransactionInput);\r\n        _assertClass(amount, Value);\r\n        wasm.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\r\n    }\r\n    /**\r\n    * @param {ByronAddress} hash\r\n    * @param {TransactionInput} input\r\n    * @param {Value} amount\r\n    */\r\n    add_bootstrap_input(hash, input, amount) {\r\n        _assertClass(hash, ByronAddress);\r\n        _assertClass(input, TransactionInput);\r\n        _assertClass(amount, Value);\r\n        wasm.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\r\n    }\r\n    /**\r\n    * @param {Address} address\r\n    * @param {TransactionInput} input\r\n    * @param {Value} amount\r\n    */\r\n    add_input(address, input, amount) {\r\n        _assertClass(address, Address);\r\n        _assertClass(input, TransactionInput);\r\n        _assertClass(amount, Value);\r\n        wasm.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\r\n    }\r\n    /**\r\n    * calculates how much the fee would increase if you added a given output\r\n    * @param {Address} address\r\n    * @param {TransactionInput} input\r\n    * @param {Value} amount\r\n    * @returns {BigNum}\r\n    */\r\n    fee_for_input(address, input, amount) {\r\n        _assertClass(address, Address);\r\n        _assertClass(input, TransactionInput);\r\n        _assertClass(amount, Value);\r\n        var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionOutput} output\r\n    */\r\n    add_output(output) {\r\n        _assertClass(output, TransactionOutput);\r\n        wasm.transactionbuilder_add_output(this.ptr, output.ptr);\r\n    }\r\n    /**\r\n    * calculates how much the fee would increase if you added a given output\r\n    * @param {TransactionOutput} output\r\n    * @returns {BigNum}\r\n    */\r\n    fee_for_output(output) {\r\n        _assertClass(output, TransactionOutput);\r\n        var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} fee\r\n    */\r\n    set_fee(fee) {\r\n        _assertClass(fee, BigNum);\r\n        wasm.transactionbuilder_set_fee(this.ptr, fee.ptr);\r\n    }\r\n    /**\r\n    * @param {number} ttl\r\n    */\r\n    set_ttl(ttl) {\r\n        wasm.transactionbuilder_set_ttl(this.ptr, ttl);\r\n    }\r\n    /**\r\n    * @param {number} validity_start_interval\r\n    */\r\n    set_validity_start_interval(validity_start_interval) {\r\n        wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);\r\n    }\r\n    /**\r\n    * @param {Certificates} certs\r\n    */\r\n    set_certs(certs) {\r\n        _assertClass(certs, Certificates);\r\n        wasm.transactionbuilder_set_certs(this.ptr, certs.ptr);\r\n    }\r\n    /**\r\n    * @param {Withdrawals} withdrawals\r\n    */\r\n    set_withdrawals(withdrawals) {\r\n        _assertClass(withdrawals, Withdrawals);\r\n        wasm.transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);\r\n    }\r\n    /**\r\n    * @param {TransactionInputs} collateral\r\n    */\r\n    set_collateral(collateral) {\r\n        _assertClass(collateral, TransactionInputs);\r\n        wasm.transactionbuilder_set_collateral(this.ptr, collateral.ptr);\r\n    }\r\n    /**\r\n    * @param {PlutusList} plutus_data\r\n    */\r\n    set_plutus_data(plutus_data) {\r\n        _assertClass(plutus_data, PlutusList);\r\n        wasm.transactionbuilder_set_plutus_data(this.ptr, plutus_data.ptr);\r\n    }\r\n    /**\r\n    * @param {Redeemers} redeemers\r\n    */\r\n    set_redeemers(redeemers) {\r\n        _assertClass(redeemers, Redeemers);\r\n        wasm.transactionbuilder_set_redeemers(this.ptr, redeemers.ptr);\r\n    }\r\n    /**\r\n    * @param {PlutusScripts} plutus_scripts\r\n    */\r\n    set_plutus_scripts(plutus_scripts) {\r\n        _assertClass(plutus_scripts, PlutusScripts);\r\n        wasm.transactionbuilder_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\r\n    }\r\n    /**\r\n    * @param {Ed25519KeyHashes} required_signers\r\n    */\r\n    set_required_signers(required_signers) {\r\n        _assertClass(required_signers, Ed25519KeyHashes);\r\n        wasm.transactionbuilder_set_required_signers(this.ptr, required_signers.ptr);\r\n    }\r\n    /**\r\n    * @param {AuxiliaryData} auxiliary_data\r\n    */\r\n    set_auxiliary_data(auxiliary_data) {\r\n        _assertClass(auxiliary_data, AuxiliaryData);\r\n        wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\r\n    }\r\n    /**\r\n    * @param {TransactionInput} input\r\n    * @returns {number}\r\n    */\r\n    index_of_input(input) {\r\n        _assertClass(input, TransactionInput);\r\n        var ret = wasm.transactionbuilder_index_of_input(this.ptr, input.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {LinearFee} linear_fee\r\n    * @param {BigNum} minimum_utxo_val\r\n    * @param {BigNum} pool_deposit\r\n    * @param {BigNum} key_deposit\r\n    * @param {number} max_value_size\r\n    * @param {number} max_tx_size\r\n    * @param {number} price_mem\r\n    * @param {number} price_step\r\n    * @param {LanguageViews | undefined} language_views\r\n    * @returns {TransactionBuilder}\r\n    */\r\n    static new(linear_fee, minimum_utxo_val, pool_deposit, key_deposit, max_value_size, max_tx_size, price_mem, price_step, language_views) {\r\n        _assertClass(linear_fee, LinearFee);\r\n        _assertClass(minimum_utxo_val, BigNum);\r\n        _assertClass(pool_deposit, BigNum);\r\n        _assertClass(key_deposit, BigNum);\r\n        let ptr0 = 0;\r\n        if (!isLikeNone(language_views)) {\r\n            _assertClass(language_views, LanguageViews);\r\n            ptr0 = language_views.ptr;\r\n            language_views.ptr = 0;\r\n        }\r\n        var ret = wasm.transactionbuilder_new(linear_fee.ptr, minimum_utxo_val.ptr, pool_deposit.ptr, key_deposit.ptr, max_value_size, max_tx_size, price_mem, price_step, ptr0);\r\n        return TransactionBuilder.__wrap(ret);\r\n    }\r\n    /**\r\n    * does not include refunds or withdrawals\r\n    * @returns {Value}\r\n    */\r\n    get_explicit_input() {\r\n        var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * withdrawals and refunds\r\n    * @returns {Value}\r\n    */\r\n    get_implicit_input() {\r\n        var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * does not include fee\r\n    * @returns {Value}\r\n    */\r\n    get_explicit_output() {\r\n        var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    get_deposit() {\r\n        var ret = wasm.transactionbuilder_get_deposit(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    get_fee_if_set() {\r\n        var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * Warning: this function will mutate the /fee/ field\r\n    * @param {Address} address\r\n    * @returns {boolean}\r\n    */\r\n    add_change_if_needed(address) {\r\n        _assertClass(address, Address);\r\n        var ret = wasm.transactionbuilder_add_change_if_needed(this.ptr, address.ptr);\r\n        return ret !== 0;\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    full_size() {\r\n        var ret = wasm.transactionbuilder_full_size(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {Uint32Array}\r\n    */\r\n    output_sizes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionbuilder_output_sizes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 4);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {TransactionBody}\r\n    */\r\n    build() {\r\n        var ret = wasm.transactionbuilder_build(this.ptr);\r\n        return TransactionBody.__wrap(ret);\r\n    }\r\n    /**\r\n    * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\r\n    * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\r\n    * this is done to simplify the library code, but can be fixed later\r\n    * @returns {BigNum}\r\n    */\r\n    min_fee() {\r\n        var ret = wasm.transactionbuilder_min_fee(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionhash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionhash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {TransactionHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionhash_from_bech32(ptr0, len0);\r\n        return TransactionHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionhash_from_bytes(ptr0, len0);\r\n        return TransactionHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionInput {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionInput.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactioninput_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactioninput_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionInput}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactioninput_from_bytes(ptr0, len0);\r\n        return TransactionInput.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionHash}\r\n    */\r\n    transaction_id() {\r\n        var ret = wasm.transactioninput_transaction_id(this.ptr);\r\n        return TransactionHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    index() {\r\n        var ret = wasm.transactioninput_index(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {TransactionHash} transaction_id\r\n    * @param {number} index\r\n    * @returns {TransactionInput}\r\n    */\r\n    static new(transaction_id, index) {\r\n        _assertClass(transaction_id, TransactionHash);\r\n        var ret = wasm.transactioninput_new(transaction_id.ptr, index);\r\n        return TransactionInput.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionInputs {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionInputs.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactioninputs_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactioninputs_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionInputs}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\r\n        return TransactionInputs.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionInputs}\r\n    */\r\n    static new() {\r\n        var ret = wasm.transactioninputs_new();\r\n        return TransactionInputs.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.transactioninputs_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {TransactionInput}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.transactioninputs_get(this.ptr, index);\r\n        return TransactionInput.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionInput} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, TransactionInput);\r\n        wasm.transactioninputs_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionMetadatum {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionMetadatum.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionmetadatum_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {MetadataMap} map\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    static new_map(map) {\r\n        _assertClass(map, MetadataMap);\r\n        var ret = wasm.transactionmetadatum_new_map(map.ptr);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {MetadataList} list\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    static new_list(list) {\r\n        _assertClass(list, MetadataList);\r\n        var ret = wasm.transactionmetadatum_new_list(list.ptr);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Int} int\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    static new_int(int) {\r\n        _assertClass(int, Int);\r\n        var ret = wasm.transactionmetadatum_new_int(int.ptr);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    static new_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} text\r\n    * @returns {TransactionMetadatum}\r\n    */\r\n    static new_text(text) {\r\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\r\n        return TransactionMetadatum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    kind() {\r\n        var ret = wasm.transactionmetadatum_kind(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @returns {MetadataMap}\r\n    */\r\n    as_map() {\r\n        var ret = wasm.transactionmetadatum_as_map(this.ptr);\r\n        return MetadataMap.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {MetadataList}\r\n    */\r\n    as_list() {\r\n        var ret = wasm.transactionmetadatum_as_list(this.ptr);\r\n        return MetadataList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Int}\r\n    */\r\n    as_int() {\r\n        var ret = wasm.transactionmetadatum_as_int(this.ptr);\r\n        return Int.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    as_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    as_text() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionmetadatum_as_text(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionMetadatumLabels {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionmetadatumlabels_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionMetadatumLabels}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\r\n        return TransactionMetadatumLabels.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionMetadatumLabels}\r\n    */\r\n    static new() {\r\n        var ret = wasm.transactionmetadatumlabels_new();\r\n        return TransactionMetadatumLabels.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.transactionmetadatumlabels_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {BigNum}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, BigNum);\r\n        wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionOutput {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionOutput.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionoutput_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionoutput_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionOutput}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\r\n        return TransactionOutput.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Address}\r\n    */\r\n    address() {\r\n        var ret = wasm.transactionoutput_address(this.ptr);\r\n        return Address.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Value}\r\n    */\r\n    amount() {\r\n        var ret = wasm.transactionoutput_amount(this.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {DataHash | undefined}\r\n    */\r\n    data_hash() {\r\n        var ret = wasm.transactionoutput_data_hash(this.ptr);\r\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {DataHash} data_hash\r\n    */\r\n    set_data_hash(data_hash) {\r\n        _assertClass(data_hash, DataHash);\r\n        wasm.transactionoutput_set_data_hash(this.ptr, data_hash.ptr);\r\n    }\r\n    /**\r\n    * @param {Address} address\r\n    * @param {Value} amount\r\n    * @returns {TransactionOutput}\r\n    */\r\n    static new(address, amount) {\r\n        _assertClass(address, Address);\r\n        _assertClass(amount, Value);\r\n        var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\r\n        return TransactionOutput.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionOutputs {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionOutputs.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionoutputs_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionoutputs_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionOutputs}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\r\n        return TransactionOutputs.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionOutputs}\r\n    */\r\n    static new() {\r\n        var ret = wasm.transactionoutputs_new();\r\n        return TransactionOutputs.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.transactionoutputs_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {TransactionOutput}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.transactionoutputs_get(this.ptr, index);\r\n        return TransactionOutput.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionOutput} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, TransactionOutput);\r\n        wasm.transactionoutputs_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionUnspentOutput {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionUnspentOutput.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionunspentoutput_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionUnspentOutput}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionunspentoutput_from_bytes(ptr0, len0);\r\n        return TransactionUnspentOutput.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionInput} input\r\n    * @param {TransactionOutput} output\r\n    * @returns {TransactionUnspentOutput}\r\n    */\r\n    static new(input, output) {\r\n        _assertClass(input, TransactionInput);\r\n        _assertClass(output, TransactionOutput);\r\n        var ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\r\n        return TransactionUnspentOutput.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionInput}\r\n    */\r\n    input() {\r\n        var ret = wasm.transactionunspentoutput_input(this.ptr);\r\n        return TransactionInput.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionOutput}\r\n    */\r\n    output() {\r\n        var ret = wasm.transactionunspentoutput_output(this.ptr);\r\n        return TransactionOutput.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionWitnessSet {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionWitnessSet.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionwitnessset_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionWitnessSet}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\r\n        return TransactionWitnessSet.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Vkeywitnesses} vkeys\r\n    */\r\n    set_vkeys(vkeys) {\r\n        _assertClass(vkeys, Vkeywitnesses);\r\n        wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\r\n    }\r\n    /**\r\n    * @returns {Vkeywitnesses | undefined}\r\n    */\r\n    vkeys() {\r\n        var ret = wasm.transactionwitnessset_vkeys(this.ptr);\r\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {NativeScripts} native_scripts\r\n    */\r\n    set_native_scripts(native_scripts) {\r\n        _assertClass(native_scripts, NativeScripts);\r\n        wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\r\n    }\r\n    /**\r\n    * @returns {NativeScripts | undefined}\r\n    */\r\n    native_scripts() {\r\n        var ret = wasm.transactionwitnessset_native_scripts(this.ptr);\r\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BootstrapWitnesses} bootstraps\r\n    */\r\n    set_bootstraps(bootstraps) {\r\n        _assertClass(bootstraps, BootstrapWitnesses);\r\n        wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\r\n    }\r\n    /**\r\n    * @returns {BootstrapWitnesses | undefined}\r\n    */\r\n    bootstraps() {\r\n        var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\r\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusScripts} plutus_scripts\r\n    */\r\n    set_plutus_scripts(plutus_scripts) {\r\n        _assertClass(plutus_scripts, PlutusScripts);\r\n        wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\r\n    }\r\n    /**\r\n    * @returns {PlutusScripts | undefined}\r\n    */\r\n    plutus_scripts() {\r\n        var ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\r\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PlutusList} plutus_data\r\n    */\r\n    set_plutus_data(plutus_data) {\r\n        _assertClass(plutus_data, PlutusList);\r\n        wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\r\n    }\r\n    /**\r\n    * @returns {PlutusList | undefined}\r\n    */\r\n    plutus_data() {\r\n        var ret = wasm.transactionwitnessset_plutus_data(this.ptr);\r\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Redeemers} redeemers\r\n    */\r\n    set_redeemers(redeemers) {\r\n        _assertClass(redeemers, Redeemers);\r\n        wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\r\n    }\r\n    /**\r\n    * @returns {Redeemers | undefined}\r\n    */\r\n    redeemers() {\r\n        var ret = wasm.transactionwitnessset_redeemers(this.ptr);\r\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionWitnessSet}\r\n    */\r\n    static new() {\r\n        var ret = wasm.transactionwitnessset_new();\r\n        return TransactionWitnessSet.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class TransactionWitnessSets {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(TransactionWitnessSets.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_transactionwitnesssets_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {TransactionWitnessSets}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\r\n        return TransactionWitnessSets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {TransactionWitnessSets}\r\n    */\r\n    static new() {\r\n        var ret = wasm.transactionwitnesssets_new();\r\n        return TransactionWitnessSets.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.transactionwitnesssets_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {TransactionWitnessSet}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.transactionwitnesssets_get(this.ptr, index);\r\n        return TransactionWitnessSet.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {TransactionWitnessSet} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, TransactionWitnessSet);\r\n        wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class URL {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(URL.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_url_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.url_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {URL}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.url_from_bytes(ptr0, len0);\r\n        return URL.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {string} url\r\n    * @returns {URL}\r\n    */\r\n    static new(url) {\r\n        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.url_new(ptr0, len0);\r\n        return URL.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {string}\r\n    */\r\n    url() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.url_url(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class UnitInterval {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(UnitInterval.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_unitinterval_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.unitinterval_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {UnitInterval}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.unitinterval_from_bytes(ptr0, len0);\r\n        return UnitInterval.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    numerator() {\r\n        var ret = wasm.unitinterval_numerator(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    denominator() {\r\n        var ret = wasm.unitinterval_denominator(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} numerator\r\n    * @param {BigNum} denominator\r\n    * @returns {UnitInterval}\r\n    */\r\n    static new(numerator, denominator) {\r\n        _assertClass(numerator, BigNum);\r\n        _assertClass(denominator, BigNum);\r\n        var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\r\n        return UnitInterval.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Update {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Update.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_update_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.update_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Update}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.update_from_bytes(ptr0, len0);\r\n        return Update.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {ProposedProtocolParameterUpdates}\r\n    */\r\n    proposed_protocol_parameter_updates() {\r\n        var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\r\n        return ProposedProtocolParameterUpdates.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    epoch() {\r\n        var ret = wasm.update_epoch(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\r\n    * @param {number} epoch\r\n    * @returns {Update}\r\n    */\r\n    static new(proposed_protocol_parameter_updates, epoch) {\r\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\r\n        var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\r\n        return Update.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class VRFCert {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(VRFCert.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_vrfcert_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.vrfcert_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {VRFCert}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vrfcert_from_bytes(ptr0, len0);\r\n        return VRFCert.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    output() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.vrfcert_output(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    proof() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.vrfcert_proof(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} output\r\n    * @param {Uint8Array} proof\r\n    * @returns {VRFCert}\r\n    */\r\n    static new(output, proof) {\r\n        var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\r\n        var len1 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\r\n        return VRFCert.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class VRFKeyHash {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(VRFKeyHash.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_vrfkeyhash_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.vrfkeyhash_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {VRFKeyHash}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\r\n        return VRFKeyHash.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {VRFKeyHash}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\r\n        return VRFKeyHash.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class VRFVKey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(VRFVKey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_vrfvkey_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.vrfvkey_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} prefix\r\n    * @returns {string}\r\n    */\r\n    to_bech32(prefix) {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n            var len0 = WASM_VECTOR_LEN;\r\n            wasm.vrfvkey_to_bech32(retptr, this.ptr, ptr0, len0);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            return getStringFromWasm0(r0, r1);\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n            wasm.__wbindgen_free(r0, r1);\r\n        }\r\n    }\r\n    /**\r\n    * @param {string} bech_str\r\n    * @returns {VRFVKey}\r\n    */\r\n    static from_bech32(bech_str) {\r\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vrfvkey_from_bech32(ptr0, len0);\r\n        return VRFVKey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {VRFVKey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\r\n        return VRFVKey.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Value {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Value.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_value_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.value_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Value}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.value_from_bytes(ptr0, len0);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} coin\r\n    * @returns {Value}\r\n    */\r\n    static new(coin) {\r\n        _assertClass(coin, BigNum);\r\n        var ret = wasm.value_new(coin.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {BigNum}\r\n    */\r\n    coin() {\r\n        var ret = wasm.value_coin(this.ptr);\r\n        return BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {BigNum} coin\r\n    */\r\n    set_coin(coin) {\r\n        _assertClass(coin, BigNum);\r\n        wasm.value_set_coin(this.ptr, coin.ptr);\r\n    }\r\n    /**\r\n    * @returns {MultiAsset | undefined}\r\n    */\r\n    multiasset() {\r\n        var ret = wasm.value_multiasset(this.ptr);\r\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {MultiAsset} multiasset\r\n    */\r\n    set_multiasset(multiasset) {\r\n        _assertClass(multiasset, MultiAsset);\r\n        wasm.value_set_multiasset(this.ptr, multiasset.ptr);\r\n    }\r\n    /**\r\n    * @param {Value} rhs\r\n    * @returns {Value}\r\n    */\r\n    checked_add(rhs) {\r\n        _assertClass(rhs, Value);\r\n        var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Value} rhs_value\r\n    * @returns {Value}\r\n    */\r\n    checked_sub(rhs_value) {\r\n        _assertClass(rhs_value, Value);\r\n        var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Value} rhs_value\r\n    * @returns {Value}\r\n    */\r\n    clamped_sub(rhs_value) {\r\n        _assertClass(rhs_value, Value);\r\n        var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\r\n        return Value.__wrap(ret);\r\n    }\r\n    /**\r\n    * note: values are only partially comparable\r\n    * @param {Value} rhs_value\r\n    * @returns {number | undefined}\r\n    */\r\n    compare(rhs_value) {\r\n        _assertClass(rhs_value, Value);\r\n        var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\r\n        return ret === 0xFFFFFF ? undefined : ret;\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Vkey {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Vkey.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_vkey_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.vkey_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Vkey}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vkey_from_bytes(ptr0, len0);\r\n        return Vkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {PublicKey} pk\r\n    * @returns {Vkey}\r\n    */\r\n    static new(pk) {\r\n        _assertClass(pk, PublicKey);\r\n        var ret = wasm.vkey_new(pk.ptr);\r\n        return Vkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {PublicKey}\r\n    */\r\n    public_key() {\r\n        var ret = wasm.vkey_public_key(this.ptr);\r\n        return PublicKey.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Vkeys {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Vkeys.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_vkeys_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Vkeys}\r\n    */\r\n    static new() {\r\n        var ret = wasm.vkeys_new();\r\n        return Vkeys.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.vkeys_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {Vkey}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.vkeys_get(this.ptr, index);\r\n        return Vkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Vkey} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, Vkey);\r\n        wasm.vkeys_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Vkeywitness {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Vkeywitness.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_vkeywitness_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.vkeywitness_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Vkeywitness}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\r\n        return Vkeywitness.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Vkey} vkey\r\n    * @param {Ed25519Signature} signature\r\n    * @returns {Vkeywitness}\r\n    */\r\n    static new(vkey, signature) {\r\n        _assertClass(vkey, Vkey);\r\n        _assertClass(signature, Ed25519Signature);\r\n        var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\r\n        return Vkeywitness.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Vkey}\r\n    */\r\n    vkey() {\r\n        var ret = wasm.vkeywitness_vkey(this.ptr);\r\n        return Vkey.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Ed25519Signature}\r\n    */\r\n    signature() {\r\n        var ret = wasm.vkeywitness_signature(this.ptr);\r\n        return Ed25519Signature.__wrap(ret);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Vkeywitnesses {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Vkeywitnesses.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_vkeywitnesses_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Vkeywitnesses}\r\n    */\r\n    static new() {\r\n        var ret = wasm.vkeywitnesses_new();\r\n        return Vkeywitnesses.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.vkeywitnesses_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {number} index\r\n    * @returns {Vkeywitness}\r\n    */\r\n    get(index) {\r\n        var ret = wasm.vkeywitnesses_get(this.ptr, index);\r\n        return Vkeywitness.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {Vkeywitness} elem\r\n    */\r\n    add(elem) {\r\n        _assertClass(elem, Vkeywitness);\r\n        wasm.vkeywitnesses_add(this.ptr, elem.ptr);\r\n    }\r\n}\r\n/**\r\n*/\r\nexport class Withdrawals {\r\n\r\n    static __wrap(ptr) {\r\n        const obj = Object.create(Withdrawals.prototype);\r\n        obj.ptr = ptr;\r\n\r\n        return obj;\r\n    }\r\n\r\n    __destroy_into_raw() {\r\n        const ptr = this.ptr;\r\n        this.ptr = 0;\r\n\r\n        return ptr;\r\n    }\r\n\r\n    free() {\r\n        const ptr = this.__destroy_into_raw();\r\n        wasm.__wbg_withdrawals_free(ptr);\r\n    }\r\n    /**\r\n    * @returns {Uint8Array}\r\n    */\r\n    to_bytes() {\r\n        try {\r\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\r\n            wasm.withdrawals_to_bytes(retptr, this.ptr);\r\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\r\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\r\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\r\n            wasm.__wbindgen_free(r0, r1 * 1);\r\n            return v0;\r\n        } finally {\r\n            wasm.__wbindgen_add_to_stack_pointer(16);\r\n        }\r\n    }\r\n    /**\r\n    * @param {Uint8Array} bytes\r\n    * @returns {Withdrawals}\r\n    */\r\n    static from_bytes(bytes) {\r\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\r\n        var len0 = WASM_VECTOR_LEN;\r\n        var ret = wasm.withdrawals_from_bytes(ptr0, len0);\r\n        return Withdrawals.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {Withdrawals}\r\n    */\r\n    static new() {\r\n        var ret = wasm.withdrawals_new();\r\n        return Withdrawals.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {number}\r\n    */\r\n    len() {\r\n        var ret = wasm.withdrawals_len(this.ptr);\r\n        return ret >>> 0;\r\n    }\r\n    /**\r\n    * @param {RewardAddress} key\r\n    * @param {BigNum} value\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    insert(key, value) {\r\n        _assertClass(key, RewardAddress);\r\n        _assertClass(value, BigNum);\r\n        var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @param {RewardAddress} key\r\n    * @returns {BigNum | undefined}\r\n    */\r\n    get(key) {\r\n        _assertClass(key, RewardAddress);\r\n        var ret = wasm.withdrawals_get(this.ptr, key.ptr);\r\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\r\n    }\r\n    /**\r\n    * @returns {RewardAddresses}\r\n    */\r\n    keys() {\r\n        var ret = wasm.withdrawals_keys(this.ptr);\r\n        return RewardAddresses.__wrap(ret);\r\n    }\r\n}\r\n\r\nexport function __wbindgen_object_drop_ref(arg0) {\r\n    takeObject(arg0);\r\n};\r\n\r\nexport function __wbindgen_string_new(arg0, arg1) {\r\n    var ret = getStringFromWasm0(arg0, arg1);\r\n    return addHeapObject(ret);\r\n};\r\n\r\nexport function __wbg_new_3a746f2619705add(arg0, arg1) {\r\n    var ret = new Function(getStringFromWasm0(arg0, arg1));\r\n    return addHeapObject(ret);\r\n};\r\n\r\nexport function __wbg_call_f54d3a6dadb199ca(arg0, arg1) {\r\n    var ret = getObject(arg0).call(getObject(arg1));\r\n    return addHeapObject(ret);\r\n};\r\n\r\nexport function __wbindgen_jsval_eq(arg0, arg1) {\r\n    var ret = getObject(arg0) === getObject(arg1);\r\n    return ret;\r\n};\r\n\r\nexport function __wbg_self_ac379e780a0d8b94(arg0) {\r\n    var ret = getObject(arg0).self;\r\n    return addHeapObject(ret);\r\n};\r\n\r\nexport function __wbg_crypto_1e4302b85d4f64a2(arg0) {\r\n    var ret = getObject(arg0).crypto;\r\n    return addHeapObject(ret);\r\n};\r\n\r\nexport function __wbindgen_is_undefined(arg0) {\r\n    var ret = getObject(arg0) === undefined;\r\n    return ret;\r\n};\r\n\r\nexport function __wbg_getRandomValues_1b4ba144162a5c9e(arg0) {\r\n    var ret = getObject(arg0).getRandomValues;\r\n    return addHeapObject(ret);\r\n};\r\n\r\nexport function __wbg_require_6461b1e9a0d7c34a(arg0, arg1) {\r\n    var ret = require(getStringFromWasm0(arg0, arg1));\r\n    return addHeapObject(ret);\r\n};\r\n\r\nexport function __wbg_getRandomValues_1ef11e888e5228e9(arg0, arg1, arg2) {\r\n    getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\r\n};\r\n\r\nexport function __wbg_randomFillSync_1b52c8482374c55b(arg0, arg1, arg2) {\r\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\r\n};\r\n\r\nexport function __wbindgen_string_get(arg0, arg1) {\r\n    const obj = getObject(arg1);\r\n    var ret = typeof(obj) === 'string' ? obj : undefined;\r\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n    var len0 = WASM_VECTOR_LEN;\r\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\r\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\r\n};\r\n\r\nexport function __wbindgen_debug_string(arg0, arg1) {\r\n    var ret = debugString(getObject(arg1));\r\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\r\n    var len0 = WASM_VECTOR_LEN;\r\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\r\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\r\n};\r\n\r\nexport function __wbindgen_throw(arg0, arg1) {\r\n    throw new Error(getStringFromWasm0(arg0, arg1));\r\n};\r\n\r\nexport function __wbindgen_rethrow(arg0) {\r\n    throw takeObject(arg0);\r\n};\r\n\r\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}